" vim: set ft=vim ts=2 sw=2 sts=2 et foldmethod=marker:
"
" Neobundleの設定 
"
" vim +NeoBundleInstall +qall
"
" @Update 2014.10.10
" @Author Hajime Matsumoto
" @See https://github.com/Shougo/neobundle.vim
"
if !1 | finish | endif


"
" ネオバンドル導入分 {{{
" 
if has('vim_starting')
  set runtimepath+=~/.dotfiles/vim/third/neobundle.vim/
endif

" Start Neo Bundle
call neobundle#begin(expand('~/.dotfiles/vim/bundle/'))

" NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Vim Filer
" NeoBundle 'Shougo/vimfiler.vim'

" Vim Procのコンパイル設定
NeoBundle 'Shougo/vimproc',{'build': 
\ {
\   'windows': 'make -f make_windows.mak',
\   'cygwin': 'make -f make_cygwin.mak',
\   'mac': 'make -f make_mac.mak',
\   'unix': 'make -f make_unix.mak',
\ }
\}

" }}}


"
" メモ帳
"
" @See https://sites.google.com/site/fudist/Home/qfixhowm/install
NeoBundle 'fuenor/qfixhowm'

" VimShell {{{
NeoBundle 'Shougo/vimshell'
nnoremap   [vimshell]   <Nop>
nmap       <Leader>s          [vimshell]

nnoremap <silent> [vimshell]s :VimShell<CR>
nnoremap <silent> [vimshell]iphp :VimShellInteractive php<CR>
vmap <silent> [vimshell]s :VimShellSendString<CR>
" }}}

" Unite {{{
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'tacroe/unite-mark'
NeoBundle 'osyo-manga/unite-fold'
NeoBundle 'taka84u9/unite-git'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'kannokanno/unite-dwm'

let g:unite_source_grep_command              = 'ag'
let g:unite_source_grep_default_opts         = '--nocolor --nogroup'
let g:unite_source_grep_recursive_opt        = ''
let g:unite_source_grep_max_candidates       = 200
let g:unite_source_file_mru_limit            = 200
let g:unite_enable_start_insert              = 1
let g:unite_source_history_yank_enable       = 1



" }}}

" 辞書 {{{
NeoBundle 'thinca/vim-ref'
NeoBundle 'mfumi/ref-dicts-en'
"vim-ref
"Ref webdictでalcを使う設定
let g:ref_source_webdict_cmd = 'lynx -dump -nonumbers %s'
"let g:ref_source_webdict_use_cache = 1
let g:ref_source_webdict_sites = {
            \ 'alc' : {
            \   'url' : 'http://eow.alc.co.jp/%s/UTF-8/',
            \   'cache' : 1
            \   },
            \ 'wiktionary' : {
            \   'url' : 'http://ja.wiktionary.org/wiki/%s',
            \   'keyword_encoding': 'utf-8',
            \   'cache' : 1
            \   }
            \ }
function! g:ref_source_webdict_sites.alc.filter(output)
      return join(split(a:output, "\n")[42 :], "\n")
endfunction

" 
" vimshell% cd ~/.vim/
" vimshell% curl -sSL "http://jp1.php.net/get/php_manual_ja.tar.gz/from/this/mirror" | tar zxvf -
"
let g:ref_phpmanual_path = "/opt/vim/php-chunked-xhtml/"

nmap ,ra :<C-u>Ref webdict alc 
nmap ,rw :<C-u>Ref webdict wiktionary 
nmap ,rp :<C-u>Ref phpmanual 
" }}}

" 補完プラグイン {{{
" Luaオプションの有無で使用するプラグインを変更
function! s:meet_neocomplete_requirements()
	return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

if s:meet_neocomplete_requirements()
	NeoBundle 'Shougo/neocomplete.vim'
	NeoBundleFetch 'Shougo/neocomplcache.vim'
else
	NeoBundleFetch 'Shougo/neocomplete.vim'
	NeoBundle 'Shougo/neocomplcache.vim'
endif

if neobundle#is_installed('neocomplete')
	let g:neocomplcate#enable_at_startup=1
endif
if neobundle#is_installed('neocomplcache')
	let g:neocomplcache#enable_at_startup=1
endif

"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
if s:meet_neocomplete_requirements()
	" 新しく追加した neocomplete の設定
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
		\ 'default' : '',
		\ 'vimshell' : $HOME.'/.vimshell_hist',
		\ 'scheme' : $HOME.'/.gosh_completions'
			\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
	inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
	  return neocomplete#close_popup() . "\<CR>"
	  " For no inserting <CR> key.
	  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><C-y>  neocomplete#close_popup()
	inoremap <expr><C-e>  neocomplete#cancel_popup()
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

	" For cursor moving in insert mode(Not recommended)
	"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
	"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
	"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
	"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
	" Or set this.
	"let g:neocomplete#enable_cursor_hold_i = 1
	" Or set this.
	"let g:neocomplete#enable_insert_char_pre = 1

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
	  let g:neocomplete#sources#omni#input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
else
	" 今までの neocomplcache の設定
endif

" }}}

" タイル式ウィンドウ管理 {{{
" @See https://github.com/spolu/dwm.vim
" NeoBundle 'spolu/dwm.vim'
"
" let g:dwm_map_keys=0 " let g:dwm_master_pane_width=80
"
" nnoremap <c-j> <c-w>w
" nnoremap <c-k> <c-w>W
" "nmap <m-r> <Plug>DWMRotateCounterclockwise
" "nmap <m-t> <Plug>DWMRotateClockwise
" "nmap <c-n> <Plug>DWMNew
" nmap <c-c> <Plug>DWMClose
" nmap <c-@> <Plug>DWMFocus
" nmap <c-Space> <Plug>DWMFocus
" nmap <c-l> <Plug>DWMGrowMaster
" nmap <c-h> <Plug>DWMShrinkMaster
"}}}

" インデントをわかりやすくする {{{
NeoBundle 'nathanaelkane/vim-indent-guides'
let g:indent_guides_auto_colors=0
let g:indent_guides_start_level=2
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=236
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=235
" }}}


"
" プログラミング用
"
" HTML5シンタックスを有効にする
NeoBundle 'othree/html5.vim.git'
NeoBundle 'tpope/vim-surround'
" CoffeeScript用プラグイン
NeoBundle 'kchmck/vim-coffee-script'
" Align
NeoBundle 'h1mesuke/vim-alignta.git'
" TagList
NeoBundle 'taglist.vim'
" タグジャンプ
NeoBundle 'szw/vim-tags'
" Unite Tag
NeoBundle 'tsukkee/unite-tag'
"Dockerfile Syntax
NeoBundle 'ekalinin/Dockerfile.vim'
"Vagrant Syntax
NeoBundle 'markcornick/vim-vagrant'
"Tmux Syntax
NeoBundle 'Keithbsmiley/tmux.vim'

" Powerline
NeoBundle 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim' }
NeoBundle 'Lokaltog/powerline-fontpatcher'

" Gitを便利に使う
NeoBundle 'tpope/vim-fugitive'
"
" " grep検索の実行後にQuickFix Listを表示する
autocmd QuickFixCmdPost *grep* cwindow

" コメントON/OFFを手軽に実行 (gcc)
NeoBundle 'tomtom/tcomment_vim'

" HTML閉じタグ後のコメントを,tで入力
NeoBundle 'haya14busa/endtagcomment.vim'
nmap ,t <Plug>(endtagcomment)

" プロジェクト管理
" NeoBundle 'project.vim'
NeoBundle 'kien/ctrlp.vim'

" http://d.hatena.ne.jp/thinca/20130131/1359567419
NeoBundle  'kana/vim-submode'

"
" カラースキーマ一式
"
"NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'nanotech/jellybeans.vim'
"NeoBundle 'w0ng/vim-hybrid'
"NeoBundle 'altercation/vim-colors-solarized'
"NeoBundle 'croaker/mustang-vim'
"NeoBundle 'jeffreyiacono/vim-colors-wombat'
"NeoBundle 'nanotech/jellybeans.vim'
"NeoBundle 'vim-scripts/Lucius'
"NeoBundle 'vim-scripts/Zenburn'
"NeoBundle 'mrkn/mrkn256.vim'
"NeoBundle 'therubymug/vim-pyte'
"NeoBundle 'tomasr/molokai'
"NeoBundle 'https://github.com/29decibel/codeschool-vim-theme.git'

" ネオバンドルの終了
call neobundle#end()
filetype plugin indent on
NeoBundleCheck
