" vim: set ft=vim ts=4 sw=4 sts=4 foldmethod=marker :
" ----------------------------------------
" VIM設定ファイル
" ----------------------------------------
" @Author Hajime <mail@hazime.org>
" @Update 2015.06.22
" ----------------------------------------

nnoremap rv :<C-u>source ~/.vimrc<CR>

" NeoBundle用のスタートアップ {{{
" ----------------------------------------

filetype plugin indent off

if has('vim_starting')
  set runtimepath+=~/.dotfiles/vim/third/neobundle.vim/
endif

call neobundle#begin(expand('~/.dotfiles/vim/bundle/'))


" }}}

" Auto Command {{{
function! s:RestoreCursorPostion()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup NoraAutoCmd
  autocmd!
  autocmd BufWinEnter * call s:RestoreCursorPostion()
augroup END

" }}}

" プレフィックスの設定 {{{
nmap s <Nop>
nnoremap [nora] <NOP>
nmap s <ESC>[nora]
nmap <C-f> <ESC>[nora]
imap <c-f> <ESC>[nora]

nnoremap [nora:mode] <NOP>
nmap m [nora:mode]


nnoremap [nora:ext] <Nop>
nmap <space> <ESC>[nora:ext]

nnoremap [search] <nop>
nmap [nora]g <esc>[search]
" }}}

" ベーシックセッティング {{{

" VIとの互換性を保たない
set nocompatible

" ファイルロケーション
set directory=~/.vim.tmp//
set backupdir=~/.vim.tmp//

" Swapは使わない
set noswapfile
" バックアップは使う
set backup

" VIMコマンド履歴保持数
set viminfo='100
" VIMレジストリ保持数
set viminfo+="1000
" VIMINFO保存ファイル
set viminfo+=n~/.vim.info

"
" 同時編集が発生した時の挙動
"

" 他の場所で更新されたら自動的に読み込む
set autoread

" バックスペースで削除可能なものを増やす
set backspace=start,eol,indent


"
" 検索の挙動
"

" 検索時に大文字小文字を無視
set ignorecase

" ただし、検索文字に大文字小文字があれば無視しない
set smartcase  " do not ignore capital when search words includs both

" 検索文字をハイライトしない
set nohlsearch

"
" TTYの設定
"
set lazyredraw
set ttyfast

" ウィンドウ幅で折り返す
set nowrap

" 固定折り返し文字幅を持たない
set textwidth=0

" 行番号を表示する
set number

set scrolloff=16

" }}}

" 折りたたみ {{{
"set foldtext=FoldCCtext()
set foldcolumn=3
set fillchars=vert:\|
hi Folded gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey30 guifg=Grey80
hi FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue

" }}}

" タブ系の設定 {{{
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
" }}}

" ステータスラインの設定 {{{
set laststatus=2
"set showmode
set noshowmode
set showcmd
set wildmenu
set ruler

NeoBundle 'itchyny/lightline.vim'
" wonbat solarized landscape
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }
 
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! MyModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

" set statusline=%<     " 行が長すぎるときに切り詰める位置
" set statusline+=[%n]  " バッファ番号
" set statusline+=%m    " %m 修正フラグ
" set statusline+=%r    " %r 読み込み専用フラグ
" set statusline+=%h    " %h ヘルプバッファフラグ
" set statusline+=%w    " %w プレビューウィンドウフラグ
" set statusline+=%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}  " fencとffを表示
" set statusline+=%y    " バッファ内のファイルのタイプ
" set statusline+=\     " 空白スペース
" if winwidth(0) >= 130
"     set statusline+=%F    " バッファ内のファイルのフルパス
" else
"     set statusline+=%t    " ファイル名のみ
" endif
" set statusline+=%=    " 左寄せ項目と右寄せ項目の区切り
" set statusline+=%{fugitive#statusline()}  " Gitのブランチ名を表示
" set statusline+=\ \   " 空白スペース2個
" set statusline+=%1l   " 何行目にカーソルがあるか
" set statusline+=/
" set statusline+=%L    " バッファ内の総行数
" set statusline+=,
" set statusline+=%c    " 何列目にカーソルがあるか
" set statusline+=%V    " 画面上の何列目にカーソルがあるか
" set statusline+=\ \   " 空白スペース2個
" set statusline+=%P    " ファイル内の何％の位置にあるか

" }}}

" 日本語関連 {{{

" 文字コード判定順序
set fileencodings=utf-8,euc-jp,iso-2022-jp,cp932

" }}}

" シンタックス {{{
syntax enable
" }}}

" NeoBundle {{{
NeoBundleFetch 'Shougo/neobundle.vim'

" Vim Procのインストール
NeoBundle 'Shougo/vimproc',{'build': 
\ {
\   'windows': 'make -f make_windows.mak',
\   'cygwin': 'make -f make_cygwin.mak',
\   'mac': 'make -f make_mac.mak',
\   'unix': 'make -f make_unix.mak',
\ }
\}

NeoBundleLazy 'thinca/vim-quickrun', {
            \ 'autoload' : {
            \     'commands' : [ 'QuickRun' ]
            \  }
            \}

NeoBundleLazy 'Shougo/vimfiler.vim', {
\   'autoload' : { 'commands' : [ 'VimFiler', 'VimFilerTab', 'VimFilerExplorer', 'VimFilerBufferDir', 'VimFilerCreate' ] },
\   'depends': [ 'Shougo/unite.vim' ],
\ }

NeoBundleLazy 'Shougo/unite.vim' , {
\   'autoload' : { 'commands' : [ 'Unite' ] }
\ }

" VimShell
NeoBundleLazy 'Shougo/vimshell', {'depends': ['Shougo/vimproc']}


" Uniteプラグイン
NeoBundleLazy 'Shougo/unite-outline'
" NeoBundleLazy 'ujihisa/unite-colorscheme'
NeoBundleLazy 'tacroe/unite-mark'
NeoBundleLazy 'osyo-manga/unite-fold'
" NeoBundleLazy 'taka84u9/unite-git'
" NeoBundleLazy 'thinca/vim-unite-history'
" NeoBundleLazy 'kannokanno/unite-dwm'
NeoBundleLazy 'tsukkee/unite-tag'


NeoBundleLazy 'thinca/vim-ref', {
\ 'autoload' : {'commands': [ 'Ref' ] },
\ 'depends' : ["mfumi/ref-dicts-en"]
\}
NeoBundleLazy 'mfumi/ref-dicts-en'

"
" メモ帳
"
" @See https://sites.google.com/site/fudist/Home/qfixhowm/install
NeoBundleLazy 'fuenor/qfixgrep'
NeoBundleLazy 'fuenor/qfixhowm'
NeoBundleLazy "osyo-manga/unite-qfixhowm"


NeoBundleLazy "sjl/gundo.vim", {"autoload": {"commands": ['GundoToggle'],}}
NeoBundleLazy 'majutsushi/tagbar', {"autload": {"commands": ["TagbarToggle"],}}

NeoBundleLazy 'plasticboy/vim-markdown', {"autoload": {"filetypes": ["markdown"]}}

" インデントをわかりやすくする
NeoBundleLazy  'nathanaelkane/vim-indent-guides'

" VimTemplate
NeoBundleLazy "thinca/vim-template"


" ディレクトリ単位でのvimrcを有効にする
NeoBundleLazy 'thinca/vim-localrc'

" ctagsを自動化
NeoBundleLazy 'soramugi/auto-ctags.vim'

"
" プログラミング用
"
" HTML5シンタックスを有効にする
NeoBundleLazy 'othree/html5.vim.git', {"autoload": {"filetypes": ['html']}}

" CoffeeScript用プラグイン
NeoBundleLazy 'kchmck/vim-coffee-script', {"autoload": {"filetype": ["coffee"]}}

" Align
NeoBundleLazy 'h1mesuke/vim-alignta.git', {"autoload": {"commands": ["Align"]}}

" TagList
NeoBundleLazy 'taglist.vim'

" タグジャンプ
NeoBundleLazy  'szw/vim-tags'

"Dockerfile Syntax
NeoBundleLazy 'ekalinin/Dockerfile.vim', {"autoload": {"filetype": ["dockerfile"]}}

"Vagrant Syntax
NeoBundleLazy 'markcornick/vim-vagrant', {"autoload": {"filetype": ["vagrantfile"]}}

"Tmux Syntax
NeoBundleLazy 'Keithbsmiley/tmux.vim', {"autoload": {"filetype": ["tmux"]}}

" Powerline
NeoBundleLazy 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim' }
NeoBundleLazy 'Lokaltog/powerline-fontpatcher'

" HTML閉じタグ後のコメントを,tで入力
NeoBundleLazy 'haya14busa/endtagcomment.vim', {"autoload": {"filetype": ["html"]}}

" プロジェクト管理
" NeoBundle 'project.vim'
NeoBundleLazy 'kien/ctrlp.vim', {"autoload": {"commands": ["CtrlP", "CtrlPMRUFiles"]}}

" メモ
NeoBundleLazy 'glidenote/memolist.vim', {"autoload": {"commands": ["MemoList"]}}

" }}}

" 設定 {{{
NeoBundle 'kana/vim-textobj-user'

" Submoduleを有効にする
NeoBundle  'kana/vim-submode'

" Gitを便利に使う
NeoBundle 'tpope/vim-fugitive'

" コメントON/OFFを手軽に実行 (gcc)
NeoBundle 'tomtom/tcomment_vim'

" Tab単位でのcdを有効にする
NeoBundle 'kana/vim-tabpagecd'

" カラースキーマ
NeoBundle 'nanotech/jellybeans.vim'
let s:bundle = neobundle#get('jellybeans.vim')
function! s:bundle.hooks.on_source(bundle)
    colorscheme jellybeans
endfunction

" Undoをファイルを閉じた後も有効にする
if has('persistent_undo')
    set undofile
    set undodir=$HOME/.vim.tmp
endif 

" キーバインド {{{

" 間違えそうなバインドを調整(事故の素) {{{
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
nnoremap Q <Nop>
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
nnoremap ; :
cmap w1 w! 
cmap q1 q! 
" }}}

" VIをもっと直感的にする {{{
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
inoremap jj <ESC>

" カーソル下の単語を * で検索
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v, '\/'), "\n", '\\n', 'g')<CR><CR>

" 検索後にジャンプした際に検索単語を画面中央に持ってくる
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" vを二回で行末まで選択
vnoremap v $h

set showmatch           " 対応する括弧などをハイライト表示する
set matchtime=3         " 対応括弧のハイライト表示を3秒にする
" 対応括弧に'<'と'>'のペアを追加
set matchpairs& matchpairs+=<:>
" デフォルト不可視文字は美しくないのでUnicodeで綺麗に
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:↲
" }}}

" マウスの設定 {{{

" マウスの有効無効
nnoremap <F3> :call ToggleMouse()<CR>
inoremap <F3> :call ToggleMouse()<CR>
function! ToggleMouse()
	if &mouse == 'a'
		set mouse =
		echo "Mouse usage disabled"
	else
		set mouse=a
		echo "Mouse usage enabled"
	endif
endfunction
" }}}

" モードトグル {{{
nmap <silent> [nora:mode]p :<C-u>set paste!<CR>
nmap <silent> [nora:mode]m :<C-u>call ToggleMouse()<CR>
" }}}

" w!!でsudo経由で保存
cmap w!! w !sudo tee > /dev/null %

" }}}

" ウインドウ操作系 {{{

NeoBundle 'Shougo/neomru.vim'

nmap <silent> [nora]j <C-w>j
nmap <silent> [nora]k <C-w>k
nmap <silent> [nora]l <C-w>l
nmap <silent> [nora]h <C-w>h
nmap <silent> [nora]<C-j> <C-w>j
nmap <silent> [nora]<C-k> <C-w>k
nmap <silent> [nora]<C-l> <C-w>l
nmap <silent> [nora]<C-h> <C-w>h
nnoremap [nora]= <C-w>=
nnoremap [nora]> <C-w>>
nnoremap [nora]< <C-w><
nnoremap [nora]+ <C-w>+
nnoremap [nora]- <C-w>-
let s:bundle = neobundle#get("vim-submode")
function! s:bundle.hooks.on_source(bundle)
    call submode#enter_with('windowi', 'n', '', 's>', '<C-w>>')
    call submode#enter_with('windowi', 'n', '', 's<', '<C-w><')
    call submode#enter_with('windowi', 'n', '', 's+', '<C-w>+')
    call submode#enter_with('windowi', 'n', '', 's-', '<C-w>-')
    call submode#map('windowi', 'n', '', '>', '<C-w>>')
    call submode#map('windowi', 'n', '', '<', '<C-w><')
    call submode#map('windowi', 'n', '', '+', '<C-w>+')
    call submode#map('windowi', 'n', '', '-', '<C-w>-')
endfunction

" エクスプローラを開く
nnoremap <silent> [nora:ext]e :<C-u>VimFilerCreate -split -simple -winwidth=35 -no-quit<CR>
nnoremap <silent> [nora]<C-e> :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>

" タグバーを開く
nnoremap <silent> [nora:ext]t :<C-u>TagbarToggle<CR>
" gundo
nnoremap <silent> [nora:ext]g :<C-u>GundoToggle<CR>


" }}}

" Unite系 {{{
nnoremap <silent> [nora]b :<C-u>Unite buffer bookmark<CR>
nnoremap <silent> [nora]o :<C-u>Unite fold outline<CR>
nnoremap <silent> [nora]<C-h> :<C-u>Unite buffer file_mru<CR>
nnoremap <silent> [nora]c :<C-u>UniteWithBufferDir file file/new directory/new<CR>
nnoremap <silent> [nora]q :<C-u>Unite qfixhowm qfixhowm/new <CR>
nnoremap <silent> [nora]<C-q> :<C-u>Unite qfixhowm qfixhowm/new <CR>
nnoremap <silent> [nora]<C-c> :<C-u>UniteWithBufferDir file file/new directory/new<CR>
nnoremap <silent> [nora]y :<C-u>Unite history/yank<CR>

let s:bundle = neobundle#get("unite.vim")
function! s:bundle.hooks.on_source(bundle)
    let g:unite_enable_start_insert=1
    let g:unite_source_history_yank_enable =1
    let g:unite_source_file_mru_limit = 200
endfunction


autocmd NoraAutoCmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
    nnoremap <silent> <buffer> <expr> <C-T> unite#do_action('tabopen')
    inoremap <silent> <buffer> <expr> <C-T> unite#do_action('tabopen')
    nnoremap <silent> <buffer> <expr> t unite#do_action('tabopen')
    nnoremap <silent> <buffer> <expr> o unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-O> unite#do_action('split')
    inoremap <silent> <buffer> <expr> <C-O> unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
    imap <buffer> <C-k>     <Plug>(unite_select_previous_line)
    imap <buffer> <C-j>     <Plug>(unite_select_next_line)
endfunction
" }}}

" プロジェクト操作(CtrlP) {{{
let s:bundle = neobundle#get("ctrlp.vim")
function! s:bundle.hooks.on_source(bundle)
    let g:ctrlp_map = '<Nop>'
    let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_open_new_file = 'r'
    let g:ctrlp_extensions = ['tag', 'quickfix', 'dir', 'line', 'mixed']
    let g:ctrlp_max_files  = 100000 " 対象ファイル最大数(default:10000)
    let g:ctrlp_max_depth = 10 " 検索対象の最大階層数(default:40)
    let g:ctrlp_clear_cache_on_exit = 0 " vim終了時にキャッシュクリアしない(default:1)
    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:18,results:50' " 検索ウィンドウの設定
endfunction
nnoremap [nora]m :<C-u>CtrlPMRUFiles<CR> 
" }}}

" HTML操作 {{{
nmap [nora]et <Plug>(endtagcomment)
" }}}

" 辞書: vim-ref {{{
" vimshell% cd ~/.vim/
" vimshell% curl -sSL "http://jp1.php.net/get/php_manual_ja.tar.gz/from/this/mirror" | tar zxvf -
"
nnoremap [ref] <Nop>
nmap [nora]r [ref]

"Ref webdictでalcを使う設定
let g:ref_source_webdict_cmd = 'lynx -dump -nonumbers %s'
"let g:ref_source_webdict_use_cache = 1
let g:ref_source_webdict_sites = {
            \ 'alc' : {
            \   'url' : 'http://eow.alc.co.jp/%s/UTF-8/',
            \   'cache' : 1
            \   },
            \ 'wiktionary' : {
            \   'url' : 'http://ja.wiktionary.org/wiki/%s',
            \   'keyword_encoding': 'utf-8',
            \   'cache' : 1
            \   }
            \ }
function! g:ref_source_webdict_sites.alc.filter(output)
      return join(split(a:output, "\n")[42 :], "\n")
endfunction

let g:ref_phpmanual_path = "/opt/vim/php-chunked-xhtml/"
nmap [ref]a :<C-u>Ref webdict alc 
nmap [ref]w :<C-u>Ref webdict wiktionary 
nmap [ref]p :<C-u>Ref phpmanual 
" }}}

" メモ {{{

" memolist {{{
let g:memolist_qfixgrep = 1
let g:memolist_memo_suffix = "md"
let g:memolist_memo_date = "%Y-%m-%d %H:%M"
let g:memolist_memo_date = "epoch"
let g:memolist_memo_date = "%d %t"
let g:memolist_prompt_tags = 1
let g:memolist_prompt_categories = 1
let g:memolist_qfixgrep = 1
let g:memolist_vimfiler = 1
let g:memolist_template_dir_path = "~/memo/memolist"
map [nora:ext]ml  :MemoList<cr>
map [nora:ext]mn  :MemoNew<cr>
map [nora:ext]mg  :MemoGrep<cr>
" }}}

" QFixHowm {{{
" メモ機能
"set QFixHowm_Key = '<nop>'
 
let howm_dir             = '~/memo/hown'

" マークダウン記法を使う
"let QFixHowm_FileType = 'markdown'
"let QFixHowm_Title = '#'
"let QFixMRU_Title = {}
"let QFixMRU_Title['mkd']       = '^###[^#]'
"let QFixMRU_Title['mkd_regxp'] = '^###[^#]'
au BufRead,BufNewFile *.md set filetype=markdown

" ファイル拡張子をmdにする
let howm_filename = '%Y/%m/%Y-%m-%d-%H%M%S.md'
" ファイルタイプをmarkdownにする
let QFixHowm_FileType = 'markdown'
" タイトル記号
" let QFixHowm_Title = '#'
" タイトル行検索正規表現の辞書を初期化
let QFixMRU_Title = {}
" MRUでタイトル行とみなす正規表現(Vimの正規表現で指定)
let QFixMRU_Title['mkd'] = '^###[^#]'
" grepでタイトル行とみなす正規表現(使用するgrepによっては変更する必要があります)
let QFixMRU_Title['mkd_regxp'] = '^###[^#]'
" }}}

" }}}

" Grep系 {{{
nnoremap <silent> [search] :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" カーソル位置の単語で検索
nnoremap <silent> [search]j :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W><CR>
" 検索の再開
nnoremap <silent> [search]k :<C-u>UniteResume search-buffer<CR>
" }}}

" Git系 {{{
nnoremap  [nora:ext]s :<C-u>Git status<CR>
nnoremap  [nora:ext]p :<C-u>Git push<CR>
nnoremap  [nora:ext]a :<C-u>Git add %<CR>
nnoremap  [nora:ext]c :<C-u>Git commit<CR>
nnoremap  [nora:ext]d :<C-u>Git diff %<CR>
" }}}

" Snippet {{{
" スニペット
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
 
" SuperTab like snippets behavior.
" imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: pumvisible() ? "\<C-n>" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: "\<TAB>"

let g:neosnippet#snippets_directory='~/.dotfiles/vim/snippets/'
nnoremap [snipet] <nop>
nmap [nora]s [snipet]
nnoremap <silent> [snipet]e :<c-u>NeoSnippetEdit<cr>
nnoremap <silent> [snipet] :<c-u>NeoSnippetEdit<cr>

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" }}}

" 補完 {{{
" Luaオプションの有無で使用するプラグインを変更
function! s:meet_neocomplete_requirements()
	return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

if s:meet_neocomplete_requirements()
	NeoBundle 'Shougo/neocomplete.vim'
	NeoBundleFetch 'Shougo/neocomplcache.vim'
else
	NeoBundleFetch 'Shougo/neocomplete.vim'
	NeoBundle 'Shougo/neocomplcache.vim'
endif

if neobundle#is_installed('neocomplete')
	let g:neocomplcate#enable_at_startup=1
endif
if neobundle#is_installed('neocomplcache')
	let g:neocomplcache#enable_at_startup=1
endif

"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
if s:meet_neocomplete_requirements()
	" 新しく追加した neocomplete の設定
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
		\ 'default' : '',
		\ 'vimshell' : $HOME.'/.vimshell_hist',
		\ 'scheme' : $HOME.'/.gosh_completions'
			\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
	inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
	  return neocomplete#close_popup() . "\<CR>"
	  " For no inserting <CR> key.
	  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><C-y>  neocomplete#close_popup()
	inoremap <expr><C-e>  neocomplete#cancel_popup()
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

	" For cursor moving in insert mode(Not recommended)
	"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
	"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
	"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
	"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
	" Or set this.
	"let g:neocomplete#enable_cursor_hold_i = 1
	" Or set this.
	"let g:neocomplete#enable_insert_char_pre = 1

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd NoraAutoCmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd NoraAutoCmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd NoraAutoCmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd NoraAutoCmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd NoraAutoCmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
	  let g:neocomplete#sources#omni#input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
else
	" 今までの neocomplcache の設定
endif
" }}}

" Vimshell {{{


":VimShell [{options}...] [{path}]		*:VimShell*
":VimShellCreate [{options}...] [{path}]		*:VimShellCreate*
":VimShellTab [{options}...] [{path}]		*:VimShellTab*
":VimShellPop [{options}...] [{path}]		*:VimShellPop*
":VimShellCurrentDir [{options}...] [{path}]	*:VimShellCurrentDir*
":VimShellBufferDir [{options}...] [{path}]	*:VimShellBufferDir*
".:VimShellExecute [{option}] [{command}]			*:VimShellExecute*
":VimShellInteractive [{option}] [{command}]		*:VimShellInteractive*
":[range]VimShellSendString {string}		*:VimShellSendString*
":VimShellSendBuffer {bufname}			*:VimShellSendBuffer*
":VimShellClose [{buffer-name}]			*:VimShellClose*

" }}}


" }}}

" Hack {{{

" Use vsplit mode
if has("vim_starting") && !has('gui_running') && has('vertsplit')
 function! g:EnableVsplitMode()
   " enable origin mode and left/right margins
   let &t_CS = "y"
   let &t_ti = &t_ti . "\e[?6;69h"
   let &t_te = "\e[?6;69l\e[999H" . &t_te
   let &t_CV = "\e[%i%p1%d;%p2%ds"
   call writefile([ "\e[?6;69h" ], "/dev/tty", "a")
 endfunction

 " old vim does not ignore CPR
 map <special> <Esc>[3;9R <Nop>

 " new vim can't handle CPR with direct mapping
 " map <expr> ^[[3;3R g:EnableVsplitMode()
 set t_F9=[3;3R
 map <expr> <t_F9> g:EnableVsplitMode()
 let &t_RV .= "\e[?6;69h\e[1;3s\e[3;9H\e[6n\e[0;0s\e[?6;69l"
endif

command! -nargs=0 JunkFile call s:open_junk_file()
function! s:open_junk_file()
    let l:junk_dir = $HOME . '/.vim_junk'. strftime('/%Y/%m')
    if !isdirectory(l:junk_dir)
        call mkdir(l:junk_dir, 'p')
    endif

    let l:filename = input('Junk Code: ', l:junk_dir.strftime('/%Y-%m-%d-%H%M%S.'))
    if l:filename != ''
        execute 'edit ' . l:filename
    endif
endfunction

" }}}

" Quickrun {{{

let s:bundle = neobundle#get("vim-quickrun")
let g:quickrun_config = {
\   "_" : {
\       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
\       "hook/unite_quickfix/enable_failure" : 1,
\       "hook/close_quickfix/enable_exit" : 1,
\       "hook/close_buffer/enable_failure" : 1,
\       "hook/close_buffer/enable_empty_data" : 1,
\       "runner" : "vimproc",
\       "runner/vimproc/updatetime" : 60,
\       "outputter" : "multi:buffer:quickfix",
\       "outputter/buffer/split" : ":botright 18sp",
\   },
\}

nnoremap <silent> [nora:ext]r : <C-u>QuickRun<CR>

" }}}

" ネオバンドル用の終了 {{{
call neobundle#end()
filetype plugin indent on
" }}}
"
" VIM設定ファイル
"
" @Author Hajime <mail@hazime.org>
" @Update 2014.10.10
" @See http://motw.mods.jp/Vim/command.html

nnoremap rv :<C-u>source ~/.vimrc<CR>

" NeoBundle用のスタートアップ {{{
filetype plugin indent off
if has('vim_starting')
  set runtimepath+=~/.dotfiles/vim/third/neobundle.vim/
endif
" Start Neo Bundle
call neobundle#begin(expand('~/.dotfiles/vim/bundle/'))
" }}}

" Auto Command {{{
function! s:RestoreCursorPostion()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup NoraAutoCmd
  autocmd!
  autocmd BufWinEnter * call s:RestoreCursorPostion()
augroup END

" }}}

" プレフィックスの設定 {{{
nmap s <Nop>
nnoremap [nora] <NOP>
nmap s <ESC>[nora]
nmap <C-f> <ESC>[nora]
imap <c-f> <ESC>[nora]

nnoremap [nora:mode] <NOP>
nmap m [nora:mode]

nnoremap [nora:mode]s <esc>[vimshell]

nnoremap [nora:ext] <Nop>
nmap <space> <ESC>[nora:ext]

nnoremap [search] <nop>
nmap [nora]g <esc>[search]
" }}}

" ベーシックセッティング {{{

" VIとの互換性を保たない
set nocompatible

" ファイルロケーション
set directory=~/.vim.tmp//
set backupdir=~/.vim.tmp//

" Swapは使わない
set noswapfile
" バックアップは使う
set backup

" VIMコマンド履歴保持数
set viminfo='100
" VIMレジストリ保持数
set viminfo+="1000
" VIMINFO保存ファイル
set viminfo+=n~/.vim.info

"
" 同時編集が発生した時の挙動
"

" 他の場所で更新されたら自動的に読み込む
set autoread

" バックスペースで削除可能なものを増やす
set backspace=start,eol,indent


"
" 検索の挙動
"

" 検索時に大文字小文字を無視
set ignorecase

" ただし、検索文字に大文字小文字があれば無視しない
set smartcase  " do not ignore capital when search words includs both

" 検索文字をハイライトしない
set nohlsearch

"
" TTYの設定
"
set lazyredraw
set ttyfast

" ウィンドウ幅で折り返す
set nowrap

" 固定折り返し文字幅を持たない
set textwidth=0

" 行番号を表示する
set number

set scrolloff=16

" }}}

" 折りたたみ {{{
"set foldtext=FoldCCtext()
set foldcolumn=3
set fillchars=vert:\|
hi Folded gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey30 guifg=Grey80
hi FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue

" }}}

" タブ系の設定 {{{
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
" }}}

" ステータスラインの設定 {{{
set laststatus=2
"set showmode
set noshowmode
set showcmd
set wildmenu
set ruler

NeoBundle 'itchyny/lightline.vim'
" wonbat solarized landscape
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }
 
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! MyModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

" set statusline=%<     " 行が長すぎるときに切り詰める位置
" set statusline+=[%n]  " バッファ番号
" set statusline+=%m    " %m 修正フラグ
" set statusline+=%r    " %r 読み込み専用フラグ
" set statusline+=%h    " %h ヘルプバッファフラグ
" set statusline+=%w    " %w プレビューウィンドウフラグ
" set statusline+=%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}  " fencとffを表示
" set statusline+=%y    " バッファ内のファイルのタイプ
" set statusline+=\     " 空白スペース
" if winwidth(0) >= 130
"     set statusline+=%F    " バッファ内のファイルのフルパス
" else
"     set statusline+=%t    " ファイル名のみ
" endif
" set statusline+=%=    " 左寄せ項目と右寄せ項目の区切り
" set statusline+=%{fugitive#statusline()}  " Gitのブランチ名を表示
" set statusline+=\ \   " 空白スペース2個
" set statusline+=%1l   " 何行目にカーソルがあるか
" set statusline+=/
" set statusline+=%L    " バッファ内の総行数
" set statusline+=,
" set statusline+=%c    " 何列目にカーソルがあるか
" set statusline+=%V    " 画面上の何列目にカーソルがあるか
" set statusline+=\ \   " 空白スペース2個
" set statusline+=%P    " ファイル内の何％の位置にあるか

" }}}

" 日本語関連 {{{

" 文字コード判定順序
set fileencodings=utf-8,euc-jp,iso-2022-jp,cp932

" }}}

" シンタックス {{{
syntax enable
" }}}

" NeoBundle {{{
NeoBundleFetch 'Shougo/neobundle.vim'

" Vim Procのインストール
NeoBundle 'Shougo/vimproc',{'build': 
\ {
\   'windows': 'make -f make_windows.mak',
\   'cygwin': 'make -f make_cygwin.mak',
\   'mac': 'make -f make_mac.mak',
\   'unix': 'make -f make_unix.mak',
\ }
\}

NeoBundleLazy 'thinca/vim-quickrun', {
            \ 'autoload' : {
            \     'commands' : [ 'QuickRun' ]
            \  }
            \}

NeoBundleLazy 'Shougo/vimfiler.vim', {
\   'autoload' : { 'commands' : [ 'VimFiler', 'VimFilerTab', 'VimFilerExplorer', 'VimFilerBufferDir', 'VimFilerCreate' ] },
\   'depends': [ 'Shougo/unite.vim' ],
\ }

NeoBundleLazy 'Shougo/unite.vim' , {
\   'autoload' : { 'commands' : [ 'Unite' ] }
\ }

" VimShell
NeoBundleLazy 'Shougo/vimshell', {'depends': ['Shougo/vimproc']}


" Uniteプラグイン
NeoBundleLazy 'Shougo/unite-outline'
" NeoBundleLazy 'ujihisa/unite-colorscheme'
NeoBundleLazy 'tacroe/unite-mark'
NeoBundleLazy 'osyo-manga/unite-fold'
" NeoBundleLazy 'taka84u9/unite-git'
" NeoBundleLazy 'thinca/vim-unite-history'
" NeoBundleLazy 'kannokanno/unite-dwm'
NeoBundleLazy 'tsukkee/unite-tag'


NeoBundleLazy 'thinca/vim-ref', {
\ 'autoload' : {'commands': [ 'Ref' ] },
\ 'depends' : ["mfumi/ref-dicts-en"]
\}
NeoBundleLazy 'mfumi/ref-dicts-en'

"
" メモ帳
"
" @See https://sites.google.com/site/fudist/Home/qfixhowm/install
NeoBundleLazy 'fuenor/qfixgrep'
NeoBundleLazy 'fuenor/qfixhowm'
NeoBundleLazy "osyo-manga/unite-qfixhowm"


NeoBundleLazy "sjl/gundo.vim", {"autoload": {"commands": ['GundoToggle'],}}
NeoBundleLazy 'majutsushi/tagbar', {"autload": {"commands": ["TagbarToggle"],}}

NeoBundleLazy 'plasticboy/vim-markdown', {"autoload": {"filetypes": ["markdown"]}}

" インデントをわかりやすくする
NeoBundleLazy  'nathanaelkane/vim-indent-guides'

" VimTemplate
NeoBundleLazy "thinca/vim-template"


" ディレクトリ単位でのvimrcを有効にする
NeoBundleLazy 'thinca/vim-localrc'

" ctagsを自動化
NeoBundleLazy 'soramugi/auto-ctags.vim'

"
" プログラミング用
"
" HTML5シンタックスを有効にする
NeoBundleLazy 'othree/html5.vim.git', {"autoload": {"filetypes": ['html']}}

" CoffeeScript用プラグイン
NeoBundleLazy 'kchmck/vim-coffee-script', {"autoload": {"filetype": ["coffee"]}}

" Align
NeoBundleLazy 'h1mesuke/vim-alignta.git', {"autoload": {"commands": ["Align"]}}

" TagList
NeoBundleLazy 'taglist.vim'

" タグジャンプ
NeoBundleLazy  'szw/vim-tags'

"Dockerfile Syntax
NeoBundleLazy 'ekalinin/Dockerfile.vim', {"autoload": {"filetype": ["dockerfile"]}}

"Vagrant Syntax
NeoBundleLazy 'markcornick/vim-vagrant', {"autoload": {"filetype": ["vagrantfile"]}}

"Tmux Syntax
NeoBundleLazy 'Keithbsmiley/tmux.vim', {"autoload": {"filetype": ["tmux"]}}

" Powerline
NeoBundleLazy 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim' }
NeoBundleLazy 'Lokaltog/powerline-fontpatcher'

" HTML閉じタグ後のコメントを,tで入力
NeoBundleLazy 'haya14busa/endtagcomment.vim', {"autoload": {"filetype": ["html"]}}

" プロジェクト管理
" NeoBundle 'project.vim'
NeoBundleLazy 'kien/ctrlp.vim', {"autoload": {"commands": ["CtrlP", "CtrlPMRUFiles"]}}

" メモ
NeoBundleLazy 'glidenote/memolist.vim', {"autoload": {"commands": ["MemoList"]}}

" }}}

" 設定 {{{
NeoBundle 'kana/vim-textobj-user'

" Submoduleを有効にする
NeoBundle  'kana/vim-submode'

" Gitを便利に使う
NeoBundle 'tpope/vim-fugitive'

" コメントON/OFFを手軽に実行 (gcc)
NeoBundle 'tomtom/tcomment_vim'

" Tab単位でのcdを有効にする
NeoBundle 'kana/vim-tabpagecd'

" カラースキーマ
NeoBundle 'nanotech/jellybeans.vim'
let s:bundle = neobundle#get('jellybeans.vim')
function! s:bundle.hooks.on_source(bundle)
    colorscheme jellybeans
endfunction

" Undoをファイルを閉じた後も有効にする
if has('persistent_undo')
    set undofile
    set undodir=$HOME/.vim.tmp
endif 

" キーバインド {{{

" 間違えそうなバインドを調整(事故の素) {{{
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
nnoremap Q <Nop>
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
nnoremap ; :
cmap w1 w! 
cmap q1 q! 
" }}}

" VIをもっと直感的にする {{{
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
inoremap jj <ESC>

" カーソル下の単語を * で検索
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v, '\/'), "\n", '\\n', 'g')<CR><CR>

" 検索後にジャンプした際に検索単語を画面中央に持ってくる
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" vを二回で行末まで選択
vnoremap v $h

set showmatch           " 対応する括弧などをハイライト表示する
set matchtime=3         " 対応括弧のハイライト表示を3秒にする
" 対応括弧に'<'と'>'のペアを追加
set matchpairs& matchpairs+=<:>
" デフォルト不可視文字は美しくないのでUnicodeで綺麗に
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:↲
" }}}

" マウスの設定 {{{

" マウスの有効無効
nnoremap <F3> :call ToggleMouse()<CR>
inoremap <F3> :call ToggleMouse()<CR>
function! ToggleMouse()
	if &mouse == 'a'
		set mouse =
		echo "Mouse usage disabled"
	else
		set mouse=a
		echo "Mouse usage enabled"
	endif
endfunction
" }}}

" モードトグル {{{
nmap <silent> [nora:mode]p :<C-u>set paste!<CR>
nmap <silent> [nora:mode]m :<C-u>call ToggleMouse()<CR>
" }}}

" w!!でsudo経由で保存
cmap w!! w !sudo tee > /dev/null %

" }}}

" ウインドウ操作系 {{{

NeoBundle 'Shougo/neomru.vim'

nmap <silent> [nora]j <C-w>j
nmap <silent> [nora]k <C-w>k
nmap <silent> [nora]l <C-w>l
nmap <silent> [nora]h <C-w>h
nmap <silent> [nora]<C-j> <C-w>j
nmap <silent> [nora]<C-k> <C-w>k
nmap <silent> [nora]<C-l> <C-w>l
nmap <silent> [nora]<C-h> <C-w>h
nnoremap [nora]= <C-w>=
nnoremap [nora]> <C-w>>
nnoremap [nora]< <C-w><
nnoremap [nora]+ <C-w>+
nnoremap [nora]- <C-w>-
let s:bundle = neobundle#get("vim-submode")
function! s:bundle.hooks.on_source(bundle)
    call submode#enter_with('windowi', 'n', '', 's>', '<C-w>>')
    call submode#enter_with('windowi', 'n', '', 's<', '<C-w><')
    call submode#enter_with('windowi', 'n', '', 's+', '<C-w>+')
    call submode#enter_with('windowi', 'n', '', 's-', '<C-w>-')
    call submode#map('windowi', 'n', '', '>', '<C-w>>')
    call submode#map('windowi', 'n', '', '<', '<C-w><')
    call submode#map('windowi', 'n', '', '+', '<C-w>+')
    call submode#map('windowi', 'n', '', '-', '<C-w>-')
endfunction

" エクスプローラを開く
nnoremap <silent> [nora:ext]e :<C-u>VimFilerCreate -split -simple -winwidth=35 -no-quit<CR>
nnoremap <silent> [nora]<C-e> :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>

" タグバーを開く
nnoremap <silent> [nora:ext]t :<C-u>TagbarToggle<CR>
" gundo
nnoremap <silent> [nora:ext]g :<C-u>GundoToggle<CR>


" }}}

" Unite系 {{{
nnoremap <silent> [nora]b :<C-u>Unite buffer bookmark<CR>
nnoremap <silent> [nora]o :<C-u>Unite fold outline<CR>
nnoremap <silent> [nora]<C-h> :<C-u>Unite buffer file_mru<CR>
nnoremap <silent> [nora]c :<C-u>UniteWithBufferDir file file/new directory/new<CR>
nnoremap <silent> [nora]q :<C-u>Unite qfixhowm qfixhowm/new <CR>
nnoremap <silent> [nora]<C-q> :<C-u>Unite qfixhowm qfixhowm/new <CR>
nnoremap <silent> [nora]<C-c> :<C-u>UniteWithBufferDir file file/new directory/new<CR>
nnoremap <silent> [nora]y :<C-u>Unite history/yank<CR>

let s:bundle = neobundle#get("unite.vim")
function! s:bundle.hooks.on_source(bundle)
    let g:unite_enable_start_insert=1
    let g:unite_source_history_yank_enable =1
    let g:unite_source_file_mru_limit = 200
endfunction


autocmd NoraAutoCmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
    nnoremap <silent> <buffer> <expr> <C-T> unite#do_action('tabopen')
    inoremap <silent> <buffer> <expr> <C-T> unite#do_action('tabopen')
    nnoremap <silent> <buffer> <expr> t unite#do_action('tabopen')
    nnoremap <silent> <buffer> <expr> o unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-O> unite#do_action('split')
    inoremap <silent> <buffer> <expr> <C-O> unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
    imap <buffer> <C-k>     <Plug>(unite_select_previous_line)
    imap <buffer> <C-j>     <Plug>(unite_select_next_line)
endfunction
" }}}

" プロジェクト操作(CtrlP) {{{
let s:bundle = neobundle#get("ctrlp.vim")
function! s:bundle.hooks.on_source(bundle)
    let g:ctrlp_map = '<Nop>'
    let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_open_new_file = 'r'
    let g:ctrlp_extensions = ['tag', 'quickfix', 'dir', 'line', 'mixed']
    let g:ctrlp_max_files  = 100000 " 対象ファイル最大数(default:10000)
    let g:ctrlp_max_depth = 10 " 検索対象の最大階層数(default:40)
    let g:ctrlp_clear_cache_on_exit = 0 " vim終了時にキャッシュクリアしない(default:1)
    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:18,results:50' " 検索ウィンドウの設定
endfunction
nnoremap [nora]m :<C-u>CtrlPMRUFiles<CR> 
" }}}

" HTML操作 {{{
nmap [nora]et <Plug>(endtagcomment)
" }}}

" 辞書: vim-ref {{{
" vimshell% cd ~/.vim/
" vimshell% curl -sSL "http://jp1.php.net/get/php_manual_ja.tar.gz/from/this/mirror" | tar zxvf -
"
nnoremap [ref] <Nop>
nmap [nora]r [ref]

"Ref webdictでalcを使う設定
let g:ref_source_webdict_cmd = 'lynx -dump -nonumbers %s'
"let g:ref_source_webdict_use_cache = 1
let g:ref_source_webdict_sites = {
            \ 'alc' : {
            \   'url' : 'http://eow.alc.co.jp/%s/UTF-8/',
            \   'cache' : 1
            \   },
            \ 'wiktionary' : {
            \   'url' : 'http://ja.wiktionary.org/wiki/%s',
            \   'keyword_encoding': 'utf-8',
            \   'cache' : 1
            \   }
            \ }
function! g:ref_source_webdict_sites.alc.filter(output)
      return join(split(a:output, "\n")[42 :], "\n")
endfunction

let g:ref_phpmanual_path = "/opt/vim/php-chunked-xhtml/"
nmap [ref]a :<C-u>Ref webdict alc 
nmap [ref]w :<C-u>Ref webdict wiktionary 
nmap [ref]p :<C-u>Ref phpmanual 
" }}}

" メモ {{{

" memolist {{{
let g:memolist_qfixgrep = 1
let g:memolist_memo_suffix = "md"
let g:memolist_memo_date = "%Y-%m-%d %H:%M"
let g:memolist_memo_date = "epoch"
let g:memolist_memo_date = "%d %t"
let g:memolist_prompt_tags = 1
let g:memolist_prompt_categories = 1
let g:memolist_qfixgrep = 1
let g:memolist_vimfiler = 1
let g:memolist_template_dir_path = "~/memo/memolist"
map [nora:ext]ml  :MemoList<cr>
map [nora:ext]mn  :MemoNew<cr>
map [nora:ext]mg  :MemoGrep<cr>
" }}}

" QFixHowm {{{
" メモ機能
"set QFixHowm_Key = '<nop>'
 
let howm_dir             = '~/memo/hown'

" マークダウン記法を使う
"let QFixHowm_FileType = 'markdown'
"let QFixHowm_Title = '#'
"let QFixMRU_Title = {}
"let QFixMRU_Title['mkd']       = '^###[^#]'
"let QFixMRU_Title['mkd_regxp'] = '^###[^#]'
au BufRead,BufNewFile *.md set filetype=markdown

" ファイル拡張子をmdにする
let howm_filename = '%Y/%m/%Y-%m-%d-%H%M%S.md'
" ファイルタイプをmarkdownにする
let QFixHowm_FileType = 'markdown'
" タイトル記号
" let QFixHowm_Title = '#'
" タイトル行検索正規表現の辞書を初期化
let QFixMRU_Title = {}
" MRUでタイトル行とみなす正規表現(Vimの正規表現で指定)
let QFixMRU_Title['mkd'] = '^###[^#]'
" grepでタイトル行とみなす正規表現(使用するgrepによっては変更する必要があります)
let QFixMRU_Title['mkd_regxp'] = '^###[^#]'
" }}}

" }}}

" Grep系 {{{
nnoremap <silent> [search] :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" カーソル位置の単語で検索
nnoremap <silent> [search]j :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W><CR>
" 検索の再開
nnoremap <silent> [search]k :<C-u>UniteResume search-buffer<CR>
" }}}

" Git系 {{{
nnoremap  [nora:ext]s :<C-u>Git status<CR>
nnoremap  [nora:ext]p :<C-u>Git push<CR>
nnoremap  [nora:ext]a :<C-u>Git add %<CR>
nnoremap  [nora:ext]c :<C-u>Git commit<CR>
nnoremap  [nora:ext]d :<C-u>Git diff %<CR>
" }}}

" Snippet {{{
" スニペット
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
 
" SuperTab like snippets behavior.
" imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: pumvisible() ? "\<C-n>" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: "\<TAB>"

let g:neosnippet#snippets_directory='~/.dotfiles/vim/snippets/'
nnoremap [snipet] <nop>
nmap [nora]s [snipet]
nnoremap <silent> [snipet]e :<c-u>NeoSnippetEdit<cr>
nnoremap <silent> [snipet] :<c-u>NeoSnippetEdit<cr>

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" }}}

" 補完 {{{
" Luaオプションの有無で使用するプラグインを変更
function! s:meet_neocomplete_requirements()
	return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

if s:meet_neocomplete_requirements()
	NeoBundle 'Shougo/neocomplete.vim'
	NeoBundleFetch 'Shougo/neocomplcache.vim'
else
	NeoBundleFetch 'Shougo/neocomplete.vim'
	NeoBundle 'Shougo/neocomplcache.vim'
endif

if neobundle#is_installed('neocomplete')
	let g:neocomplcate#enable_at_startup=1
endif
if neobundle#is_installed('neocomplcache')
	let g:neocomplcache#enable_at_startup=1
endif

"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
if s:meet_neocomplete_requirements()
	" 新しく追加した neocomplete の設定
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
		\ 'default' : '',
		\ 'vimshell' : $HOME.'/.vimshell_hist',
		\ 'scheme' : $HOME.'/.gosh_completions'
			\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
	inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
	  return neocomplete#close_popup() . "\<CR>"
	  " For no inserting <CR> key.
	  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><C-y>  neocomplete#close_popup()
	inoremap <expr><C-e>  neocomplete#cancel_popup()
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

	" For cursor moving in insert mode(Not recommended)
	"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
	"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
	"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
	"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
	" Or set this.
	"let g:neocomplete#enable_cursor_hold_i = 1
	" Or set this.
	"let g:neocomplete#enable_insert_char_pre = 1

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd NoraAutoCmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd NoraAutoCmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd NoraAutoCmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd NoraAutoCmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd NoraAutoCmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
	  let g:neocomplete#sources#omni#input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
else
	" 今までの neocomplcache の設定
endif
" }}}

" Vimshell {{{

":VimShell [{options}...] [{path}]		*:VimShell*
":VimShellCreate [{options}...] [{path}]		*:VimShellCreate*
":VimShellTab [{options}...] [{path}]		*:VimShellTab*
":VimShellPop [{options}...] [{path}]		*:VimShellPop*
":VimShellCurrentDir [{options}...] [{path}]	*:VimShellCurrentDir*
":VimShellBufferDir [{options}...] [{path}]	*:VimShellBufferDir*
":VimShellExecute [{option}] [{command}]			*:VimShellExecute*
":VimShellInteractive [{option}] [{command}]		*:VimShellInteractive*
":[range]VimShellSendString {string}		*:VimShellSendString*
":VimShellSendBuffer {bufname}			*:VimShellSendBuffer*
":VimShellClose [{buffer-name}]			*:VimShellClose*

" }}}


" }}}

" Hack {{{

" Use vsplit mode
if has("vim_starting") && !has('gui_running') && has('vertsplit')
 function! g:EnableVsplitMode()
   " enable origin mode and left/right margins
   let &t_CS = "y"
   let &t_ti = &t_ti . "\e[?6;69h"
   let &t_te = "\e[?6;69l\e[999H" . &t_te
   let &t_CV = "\e[%i%p1%d;%p2%ds"
   call writefile([ "\e[?6;69h" ], "/dev/tty", "a")
 endfunction

 " old vim does not ignore CPR
 map <special> <Esc>[3;9R <Nop>

 " new vim can't handle CPR with direct mapping
 " map <expr> ^[[3;3R g:EnableVsplitMode()
 set t_F9=[3;3R
 map <expr> <t_F9> g:EnableVsplitMode()
 let &t_RV .= "\e[?6;69h\e[1;3s\e[3;9H\e[6n\e[0;0s\e[?6;69l"
endif

command! -nargs=0 JunkFile call s:open_junk_file()
function! s:open_junk_file()
    let l:junk_dir = $HOME . '/.vim_junk'. strftime('/%Y/%m')
    if !isdirectory(l:junk_dir)
        call mkdir(l:junk_dir, 'p')
    endif

    let l:filename = input('Junk Code: ', l:junk_dir.strftime('/%Y-%m-%d-%H%M%S.'))
    if l:filename != ''
        execute 'edit ' . l:filename
    endif
endfunction

" }}}

" Quickrun {{{

let s:bundle = neobundle#get("vim-quickrun")
let g:quickrun_config = {
\   "_" : {
\       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
\       "hook/unite_quickfix/enable_failure" : 1,
\       "hook/close_quickfix/enable_exit" : 1,
\       "hook/close_buffer/enable_failure" : 1,
\       "hook/close_buffer/enable_empty_data" : 1,
\       "runner" : "vimproc",
\       "runner/vimproc/updatetime" : 60,
\       "outputter" : "multi:buffer:quickfix",
\       "outputter/buffer/split" : ":botright 18sp",
\   },
\}

nnoremap <silent> [nora:ext]r : <C-u>QuickRun<CR>

" }}}

" ネオバンドル用の終了 {{{
call neobundle#end()
filetype plugin indent on
" }}}
" vim: set ft=vim ts=4 sw=4 sts=4 foldmethod=marker :
"
" VIM設定ファイル
"
" @Author Hajime <mail@hazime.org>
" @Update 2014.10.10
" @See http://motw.mods.jp/Vim/command.html

nnoremap rv :<C-u>source ~/.vimrc<CR>

" NeoBundle用のスタートアップ {{{
filetype plugin indent off
if has('vim_starting')
  set runtimepath+=~/.dotfiles/vim/third/neobundle.vim/
endif
" Start Neo Bundle
call neobundle#begin(expand('~/.dotfiles/vim/bundle/'))
" }}}

" Auto Command {{{
function! s:RestoreCursorPostion()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup NoraAutoCmd
  autocmd!
  autocmd BufWinEnter * call s:RestoreCursorPostion()
augroup END

" }}}

" プレフィックスの設定 {{{
nmap s <Nop>
nnoremap [nora] <NOP>
nmap s <ESC>[nora]
nmap <C-f> <ESC>[nora]
imap <c-f> <ESC>[nora]

nnoremap [nora:mode] <NOP>
nmap m [nora:mode]

nnoremap [nora:mode]s <esc>[vimshell]

nnoremap [nora:ext] <Nop>
nmap <space> <ESC>[nora:ext]

nnoremap [search] <nop>
nmap [nora]g <esc>[search]
" }}}

" ベーシックセッティング {{{

" VIとの互換性を保たない
set nocompatible

" ファイルロケーション
set directory=~/.vim.tmp//
set backupdir=~/.vim.tmp//

" Swapは使わない
set noswapfile
" バックアップは使う
set backup

" VIMコマンド履歴保持数
set viminfo='100
" VIMレジストリ保持数
set viminfo+="1000
" VIMINFO保存ファイル
set viminfo+=n~/.vim.info

"
" 同時編集が発生した時の挙動
"

" 他の場所で更新されたら自動的に読み込む
set autoread

" バックスペースで削除可能なものを増やす
set backspace=start,eol,indent


"
" 検索の挙動
"

" 検索時に大文字小文字を無視
set ignorecase

" ただし、検索文字に大文字小文字があれば無視しない
set smartcase  " do not ignore capital when search words includs both

" 検索文字をハイライトしない
set nohlsearch

"
" TTYの設定
"
set lazyredraw
set ttyfast

" ウィンドウ幅で折り返す
set nowrap

" 固定折り返し文字幅を持たない
set textwidth=0

" 行番号を表示する
set number

set scrolloff=16

" }}}

" 折りたたみ {{{
"set foldtext=FoldCCtext()
set foldcolumn=3
set fillchars=vert:\|
hi Folded gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey30 guifg=Grey80
hi FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue

" }}}

" タブ系の設定 {{{
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
" }}}

" ステータスラインの設定 {{{
set laststatus=2
"set showmode
set noshowmode
set showcmd
set wildmenu
set ruler

NeoBundle 'itchyny/lightline.vim'
" wonbat solarized landscape
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }
 
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! MyModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

" set statusline=%<     " 行が長すぎるときに切り詰める位置
" set statusline+=[%n]  " バッファ番号
" set statusline+=%m    " %m 修正フラグ
" set statusline+=%r    " %r 読み込み専用フラグ
" set statusline+=%h    " %h ヘルプバッファフラグ
" set statusline+=%w    " %w プレビューウィンドウフラグ
" set statusline+=%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}  " fencとffを表示
" set statusline+=%y    " バッファ内のファイルのタイプ
" set statusline+=\     " 空白スペース
" if winwidth(0) >= 130
"     set statusline+=%F    " バッファ内のファイルのフルパス
" else
"     set statusline+=%t    " ファイル名のみ
" endif
" set statusline+=%=    " 左寄せ項目と右寄せ項目の区切り
" set statusline+=%{fugitive#statusline()}  " Gitのブランチ名を表示
" set statusline+=\ \   " 空白スペース2個
" set statusline+=%1l   " 何行目にカーソルがあるか
" set statusline+=/
" set statusline+=%L    " バッファ内の総行数
" set statusline+=,
" set statusline+=%c    " 何列目にカーソルがあるか
" set statusline+=%V    " 画面上の何列目にカーソルがあるか
" set statusline+=\ \   " 空白スペース2個
" set statusline+=%P    " ファイル内の何％の位置にあるか

" }}}

" 日本語関連 {{{

" 文字コード判定順序
set fileencodings=utf-8,euc-jp,iso-2022-jp,cp932

" }}}

" シンタックス {{{
syntax enable
" }}}

" NeoBundle {{{
NeoBundleFetch 'Shougo/neobundle.vim'

" Vim Procのインストール
NeoBundle 'Shougo/vimproc',{'build': 
\ {
\   'windows': 'make -f make_windows.mak',
\   'cygwin': 'make -f make_cygwin.mak',
\   'mac': 'make -f make_mac.mak',
\   'unix': 'make -f make_unix.mak',
\ }
\}

NeoBundleLazy 'thinca/vim-quickrun', {
            \ 'autoload' : {
            \     'commands' : [ 'QuickRun' ]
            \  }
            \}

NeoBundleLazy 'Shougo/vimfiler.vim', {
\   'autoload' : { 'commands' : [ 'VimFiler', 'VimFilerTab', 'VimFilerExplorer', 'VimFilerBufferDir', 'VimFilerCreate' ] },
\   'depends': [ 'Shougo/unite.vim' ],
\ }

NeoBundleLazy 'Shougo/unite.vim' , {
\   'autoload' : { 'commands' : [ 'Unite' ] }
\ }

" VimShell
NeoBundleLazy 'Shougo/vimshell', {'depends': ['Shougo/vimproc']}


" Uniteプラグイン
NeoBundleLazy 'Shougo/unite-outline'
" NeoBundleLazy 'ujihisa/unite-colorscheme'
NeoBundleLazy 'tacroe/unite-mark'
NeoBundleLazy 'osyo-manga/unite-fold'
" NeoBundleLazy 'taka84u9/unite-git'
" NeoBundleLazy 'thinca/vim-unite-history'
" NeoBundleLazy 'kannokanno/unite-dwm'
NeoBundleLazy 'tsukkee/unite-tag'


NeoBundleLazy 'thinca/vim-ref', {
\ 'autoload' : {'commands': [ 'Ref' ] },
\ 'depends' : ["mfumi/ref-dicts-en"]
\}
NeoBundleLazy 'mfumi/ref-dicts-en'

"
" メモ帳
"
" @See https://sites.google.com/site/fudist/Home/qfixhowm/install
NeoBundleLazy 'fuenor/qfixgrep'
NeoBundleLazy 'fuenor/qfixhowm'
NeoBundleLazy "osyo-manga/unite-qfixhowm"


NeoBundleLazy "sjl/gundo.vim", {"autoload": {"commands": ['GundoToggle'],}}
NeoBundleLazy 'majutsushi/tagbar', {"autload": {"commands": ["TagbarToggle"],}}

NeoBundleLazy 'plasticboy/vim-markdown', {"autoload": {"filetypes": ["markdown"]}}

" インデントをわかりやすくする
NeoBundleLazy  'nathanaelkane/vim-indent-guides'

" VimTemplate
NeoBundleLazy "thinca/vim-template"


" ディレクトリ単位でのvimrcを有効にする
NeoBundleLazy 'thinca/vim-localrc'

" ctagsを自動化
NeoBundleLazy 'soramugi/auto-ctags.vim'

"
" プログラミング用
"
" HTML5シンタックスを有効にする
NeoBundleLazy 'othree/html5.vim.git', {"autoload": {"filetypes": ['html']}}

" CoffeeScript用プラグイン
NeoBundleLazy 'kchmck/vim-coffee-script', {"autoload": {"filetype": ["coffee"]}}

" Align
NeoBundleLazy 'h1mesuke/vim-alignta.git', {"autoload": {"commands": ["Align"]}}

" TagList
NeoBundleLazy 'taglist.vim'

" タグジャンプ
NeoBundleLazy  'szw/vim-tags'

"Dockerfile Syntax
NeoBundleLazy 'ekalinin/Dockerfile.vim', {"autoload": {"filetype": ["dockerfile"]}}

"Vagrant Syntax
NeoBundleLazy 'markcornick/vim-vagrant', {"autoload": {"filetype": ["vagrantfile"]}}

"Tmux Syntax
NeoBundleLazy 'Keithbsmiley/tmux.vim', {"autoload": {"filetype": ["tmux"]}}

" Powerline
NeoBundleLazy 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim' }
NeoBundleLazy 'Lokaltog/powerline-fontpatcher'

" HTML閉じタグ後のコメントを,tで入力
NeoBundleLazy 'haya14busa/endtagcomment.vim', {"autoload": {"filetype": ["html"]}}

" プロジェクト管理
" NeoBundle 'project.vim'
NeoBundleLazy 'kien/ctrlp.vim', {"autoload": {"commands": ["CtrlP", "CtrlPMRUFiles"]}}

" メモ
NeoBundleLazy 'glidenote/memolist.vim', {"autoload": {"commands": ["MemoList"]}}

" }}}

" 設定 {{{
NeoBundle 'kana/vim-textobj-user'

" Submoduleを有効にする
NeoBundle  'kana/vim-submode'

" Gitを便利に使う
NeoBundle 'tpope/vim-fugitive'

" コメントON/OFFを手軽に実行 (gcc)
NeoBundle 'tomtom/tcomment_vim'

" Tab単位でのcdを有効にする
NeoBundle 'kana/vim-tabpagecd'

" カラースキーマ
NeoBundle 'nanotech/jellybeans.vim'
let s:bundle = neobundle#get('jellybeans.vim')
function! s:bundle.hooks.on_source(bundle)
    colorscheme jellybeans
endfunction

" Undoをファイルを閉じた後も有効にする
if has('persistent_undo')
    set undofile
    set undodir=$HOME/.vim.tmp
endif 

" キーバインド {{{

" 間違えそうなバインドを調整(事故の素) {{{
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
nnoremap Q <Nop>
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
nnoremap ; :
cmap w1 w! 
cmap q1 q! 
" }}}

" VIをもっと直感的にする {{{
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
inoremap jj <ESC>

" カーソル下の単語を * で検索
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v, '\/'), "\n", '\\n', 'g')<CR><CR>

" 検索後にジャンプした際に検索単語を画面中央に持ってくる
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" vを二回で行末まで選択
vnoremap v $h

set showmatch           " 対応する括弧などをハイライト表示する
set matchtime=3         " 対応括弧のハイライト表示を3秒にする
" 対応括弧に'<'と'>'のペアを追加
set matchpairs& matchpairs+=<:>
" デフォルト不可視文字は美しくないのでUnicodeで綺麗に
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:↲
" }}}

" マウスの設定 {{{

" マウスの有効無効
nnoremap <F3> :call ToggleMouse()<CR>
inoremap <F3> :call ToggleMouse()<CR>
function! ToggleMouse()
	if &mouse == 'a'
		set mouse =
		echo "Mouse usage disabled"
	else
		set mouse=a
		echo "Mouse usage enabled"
	endif
endfunction
" }}}

" モードトグル {{{
nmap <silent> [nora:mode]p :<C-u>set paste!<CR>
nmap <silent> [nora:mode]m :<C-u>call ToggleMouse()<CR>
" }}}

" w!!でsudo経由で保存
cmap w!! w !sudo tee > /dev/null %

" }}}

" ウインドウ操作系 {{{

NeoBundle 'Shougo/neomru.vim'

nmap <silent> [nora]j <C-w>j
nmap <silent> [nora]k <C-w>k
nmap <silent> [nora]l <C-w>l
nmap <silent> [nora]h <C-w>h
nmap <silent> [nora]<C-j> <C-w>j
nmap <silent> [nora]<C-k> <C-w>k
nmap <silent> [nora]<C-l> <C-w>l
nmap <silent> [nora]<C-h> <C-w>h
nnoremap [nora]= <C-w>=
nnoremap [nora]> <C-w>>
nnoremap [nora]< <C-w><
nnoremap [nora]+ <C-w>+
nnoremap [nora]- <C-w>-
let s:bundle = neobundle#get("vim-submode")
function! s:bundle.hooks.on_source(bundle)
    call submode#enter_with('windowi', 'n', '', 's>', '<C-w>>')
    call submode#enter_with('windowi', 'n', '', 's<', '<C-w><')
    call submode#enter_with('windowi', 'n', '', 's+', '<C-w>+')
    call submode#enter_with('windowi', 'n', '', 's-', '<C-w>-')
    call submode#map('windowi', 'n', '', '>', '<C-w>>')
    call submode#map('windowi', 'n', '', '<', '<C-w><')
    call submode#map('windowi', 'n', '', '+', '<C-w>+')
    call submode#map('windowi', 'n', '', '-', '<C-w>-')
endfunction

" エクスプローラを開く
nnoremap <silent> [nora:ext]e :<C-u>VimFilerCreate -split -simple -winwidth=35 -no-quit<CR>
nnoremap <silent> [nora]<C-e> :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>

" タグバーを開く
nnoremap <silent> [nora:ext]t :<C-u>TagbarToggle<CR>
" gundo
nnoremap <silent> [nora:ext]g :<C-u>GundoToggle<CR>


" }}}

" Unite系 {{{
nnoremap <silent> [nora]b :<C-u>Unite buffer bookmark<CR>
nnoremap <silent> [nora]o :<C-u>Unite fold outline<CR>
nnoremap <silent> [nora]<C-h> :<C-u>Unite buffer file_mru<CR>
nnoremap <silent> [nora]c :<C-u>UniteWithBufferDir file file/new directory/new<CR>
nnoremap <silent> [nora]q :<C-u>Unite qfixhowm qfixhowm/new <CR>
nnoremap <silent> [nora]<C-q> :<C-u>Unite qfixhowm qfixhowm/new <CR>
nnoremap <silent> [nora]<C-c> :<C-u>UniteWithBufferDir file file/new directory/new<CR>
nnoremap <silent> [nora]y :<C-u>Unite history/yank<CR>

let s:bundle = neobundle#get("unite.vim")
function! s:bundle.hooks.on_source(bundle)
    let g:unite_enable_start_insert=1
    let g:unite_source_history_yank_enable =1
    let g:unite_source_file_mru_limit = 200
endfunction


autocmd NoraAutoCmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
    nnoremap <silent> <buffer> <expr> <C-T> unite#do_action('tabopen')
    inoremap <silent> <buffer> <expr> <C-T> unite#do_action('tabopen')
    nnoremap <silent> <buffer> <expr> t unite#do_action('tabopen')
    nnoremap <silent> <buffer> <expr> o unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-O> unite#do_action('split')
    inoremap <silent> <buffer> <expr> <C-O> unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
    imap <buffer> <C-k>     <Plug>(unite_select_previous_line)
    imap <buffer> <C-j>     <Plug>(unite_select_next_line)
endfunction
" }}}

" プロジェクト操作(CtrlP) {{{
let s:bundle = neobundle#get("ctrlp.vim")
function! s:bundle.hooks.on_source(bundle)
    let g:ctrlp_map = '<Nop>'
    let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_open_new_file = 'r'
    let g:ctrlp_extensions = ['tag', 'quickfix', 'dir', 'line', 'mixed']
    let g:ctrlp_max_files  = 100000 " 対象ファイル最大数(default:10000)
    let g:ctrlp_max_depth = 10 " 検索対象の最大階層数(default:40)
    let g:ctrlp_clear_cache_on_exit = 0 " vim終了時にキャッシュクリアしない(default:1)
    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:18,results:50' " 検索ウィンドウの設定
endfunction
nnoremap [nora]m :<C-u>CtrlPMRUFiles<CR> 
" }}}

" HTML操作 {{{
nmap [nora]et <Plug>(endtagcomment)
" }}}

" 辞書: vim-ref {{{
" vimshell% cd ~/.vim/
" vimshell% curl -sSL "http://jp1.php.net/get/php_manual_ja.tar.gz/from/this/mirror" | tar zxvf -
"
nnoremap [ref] <Nop>
nmap [nora]r [ref]

"Ref webdictでalcを使う設定
let g:ref_source_webdict_cmd = 'lynx -dump -nonumbers %s'
"let g:ref_source_webdict_use_cache = 1
let g:ref_source_webdict_sites = {
            \ 'alc' : {
            \   'url' : 'http://eow.alc.co.jp/%s/UTF-8/',
            \   'cache' : 1
            \   },
            \ 'wiktionary' : {
            \   'url' : 'http://ja.wiktionary.org/wiki/%s',
            \   'keyword_encoding': 'utf-8',
            \   'cache' : 1
            \   }
            \ }
function! g:ref_source_webdict_sites.alc.filter(output)
      return join(split(a:output, "\n")[42 :], "\n")
endfunction

let g:ref_phpmanual_path = "/opt/vim/php-chunked-xhtml/"
nmap [ref]a :<C-u>Ref webdict alc 
nmap [ref]w :<C-u>Ref webdict wiktionary 
nmap [ref]p :<C-u>Ref phpmanual 
" }}}

" メモ {{{

" memolist {{{
let g:memolist_qfixgrep = 1
let g:memolist_memo_suffix = "md"
let g:memolist_memo_date = "%Y-%m-%d %H:%M"
let g:memolist_memo_date = "epoch"
let g:memolist_memo_date = "%d %t"
let g:memolist_prompt_tags = 1
let g:memolist_prompt_categories = 1
let g:memolist_qfixgrep = 1
let g:memolist_vimfiler = 1
let g:memolist_template_dir_path = "~/memo/memolist"
map [nora:ext]ml  :MemoList<cr>
map [nora:ext]mn  :MemoNew<cr>
map [nora:ext]mg  :MemoGrep<cr>
" }}}

" QFixHowm {{{
" メモ機能
"set QFixHowm_Key = '<nop>'
 
let howm_dir             = '~/memo/hown'

" マークダウン記法を使う
"let QFixHowm_FileType = 'markdown'
"let QFixHowm_Title = '#'
"let QFixMRU_Title = {}
"let QFixMRU_Title['mkd']       = '^###[^#]'
"let QFixMRU_Title['mkd_regxp'] = '^###[^#]'
au BufRead,BufNewFile *.md set filetype=markdown

" ファイル拡張子をmdにする
let howm_filename = '%Y/%m/%Y-%m-%d-%H%M%S.md'
" ファイルタイプをmarkdownにする
let QFixHowm_FileType = 'markdown'
" タイトル記号
" let QFixHowm_Title = '#'
" タイトル行検索正規表現の辞書を初期化
let QFixMRU_Title = {}
" MRUでタイトル行とみなす正規表現(Vimの正規表現で指定)
let QFixMRU_Title['mkd'] = '^###[^#]'
" grepでタイトル行とみなす正規表現(使用するgrepによっては変更する必要があります)
let QFixMRU_Title['mkd_regxp'] = '^###[^#]'
" }}}

" }}}

" Grep系 {{{
nnoremap <silent> [search] :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" カーソル位置の単語で検索
nnoremap <silent> [search]j :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W><CR>
" 検索の再開
nnoremap <silent> [search]k :<C-u>UniteResume search-buffer<CR>
" }}}

" Git系 {{{
nnoremap  [nora:ext]s :<C-u>Git status<CR>
nnoremap  [nora:ext]p :<C-u>Git push<CR>
nnoremap  [nora:ext]a :<C-u>Git add %<CR>
nnoremap  [nora:ext]c :<C-u>Git commit<CR>
nnoremap  [nora:ext]d :<C-u>Git diff %<CR>
" }}}

" Snippet {{{
" スニペット
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
 
" SuperTab like snippets behavior.
" imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: pumvisible() ? "\<C-n>" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: "\<TAB>"

let g:neosnippet#snippets_directory='~/.dotfiles/vim/snippets/'
nnoremap [snipet] <nop>
nmap [nora]s [snipet]
nnoremap <silent> [snipet]e :<c-u>NeoSnippetEdit<cr>
nnoremap <silent> [snipet] :<c-u>NeoSnippetEdit<cr>

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" }}}

" 補完 {{{
" Luaオプションの有無で使用するプラグインを変更
function! s:meet_neocomplete_requirements()
	return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

if s:meet_neocomplete_requirements()
	NeoBundle 'Shougo/neocomplete.vim'
	NeoBundleFetch 'Shougo/neocomplcache.vim'
else
	NeoBundleFetch 'Shougo/neocomplete.vim'
	NeoBundle 'Shougo/neocomplcache.vim'
endif

if neobundle#is_installed('neocomplete')
	let g:neocomplcate#enable_at_startup=1
endif
if neobundle#is_installed('neocomplcache')
	let g:neocomplcache#enable_at_startup=1
endif

"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
if s:meet_neocomplete_requirements()
	" 新しく追加した neocomplete の設定
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
		\ 'default' : '',
		\ 'vimshell' : $HOME.'/.vimshell_hist',
		\ 'scheme' : $HOME.'/.gosh_completions'
			\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
	inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
	  return neocomplete#close_popup() . "\<CR>"
	  " For no inserting <CR> key.
	  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><C-y>  neocomplete#close_popup()
	inoremap <expr><C-e>  neocomplete#cancel_popup()
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

	" For cursor moving in insert mode(Not recommended)
	"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
	"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
	"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
	"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
	" Or set this.
	"let g:neocomplete#enable_cursor_hold_i = 1
	" Or set this.
	"let g:neocomplete#enable_insert_char_pre = 1

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd NoraAutoCmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd NoraAutoCmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd NoraAutoCmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd NoraAutoCmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd NoraAutoCmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
	  let g:neocomplete#sources#omni#input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
else
	" 今までの neocomplcache の設定
endif
" }}}

" Vimshell {{{


:VimShell [{options}...] [{path}]		*:VimShell*
:VimShellCreate [{options}...] [{path}]		*:VimShellCreate*
:VimShellTab [{options}...] [{path}]		*:VimShellTab*
:VimShellPop [{options}...] [{path}]		*:VimShellPop*
:VimShellCurrentDir [{options}...] [{path}]	*:VimShellCurrentDir*
:VimShellBufferDir [{options}...] [{path}]	*:VimShellBufferDir*
:VimShellExecute [{option}] [{command}]			*:VimShellExecute*
:VimShellInteractive [{option}] [{command}]		*:VimShellInteractive*
:[range]VimShellSendString {string}		*:VimShellSendString*
:VimShellSendBuffer {bufname}			*:VimShellSendBuffer*
:VimShellClose [{buffer-name}]			*:VimShellClose*

" }}}


" }}}

" Hack {{{

" Use vsplit mode
if has("vim_starting") && !has('gui_running') && has('vertsplit')
 function! g:EnableVsplitMode()
   " enable origin mode and left/right margins
   let &t_CS = "y"
   let &t_ti = &t_ti . "\e[?6;69h"
   let &t_te = "\e[?6;69l\e[999H" . &t_te
   let &t_CV = "\e[%i%p1%d;%p2%ds"
   call writefile([ "\e[?6;69h" ], "/dev/tty", "a")
 endfunction

 " old vim does not ignore CPR
 map <special> <Esc>[3;9R <Nop>

 " new vim can't handle CPR with direct mapping
 " map <expr> ^[[3;3R g:EnableVsplitMode()
 set t_F9=[3;3R
 map <expr> <t_F9> g:EnableVsplitMode()
 let &t_RV .= "\e[?6;69h\e[1;3s\e[3;9H\e[6n\e[0;0s\e[?6;69l"
endif

command! -nargs=0 JunkFile call s:open_junk_file()
function! s:open_junk_file()
    let l:junk_dir = $HOME . '/.vim_junk'. strftime('/%Y/%m')
    if !isdirectory(l:junk_dir)
        call mkdir(l:junk_dir, 'p')
    endif

    let l:filename = input('Junk Code: ', l:junk_dir.strftime('/%Y-%m-%d-%H%M%S.'))
    if l:filename != ''
        execute 'edit ' . l:filename
    endif
endfunction

" }}}

" Quickrun {{{

let s:bundle = neobundle#get("vim-quickrun")
let g:quickrun_config = {
\   "_" : {
\       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
\       "hook/unite_quickfix/enable_failure" : 1,
\       "hook/close_quickfix/enable_exit" : 1,
\       "hook/close_buffer/enable_failure" : 1,
\       "hook/close_buffer/enable_empty_data" : 1,
\       "runner" : "vimproc",
\       "runner/vimproc/updatetime" : 60,
\       "outputter" : "multi:buffer:quickfix",
\       "outputter/buffer/split" : ":botright 18sp",
\   },
\}

nnoremap <silent> [nora:ext]r : <C-u>QuickRun<CR>

" }}}

" ネオバンドル用の終了 {{{
call neobundle#end()
filetype plugin indent on
" }}}
"
" VIM設定ファイル
"
" @Author Hajime <mail@hazime.org>
" @Update 2014.10.10
" @See http://motw.mods.jp/Vim/command.html

nnoremap rv :<C-u>source ~/.vimrc<CR>

" NeoBundle用のスタートアップ {{{
filetype plugin indent off
if has('vim_starting')
  set runtimepath+=~/.dotfiles/vim/third/neobundle.vim/
endif
" Start Neo Bundle
call neobundle#begin(expand('~/.dotfiles/vim/bundle/'))
" }}}

" Auto Command {{{
function! s:RestoreCursorPostion()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup NoraAutoCmd
  autocmd!
  autocmd BufWinEnter * call s:RestoreCursorPostion()
augroup END

" }}}

" プレフィックスの設定 {{{
nmap s <Nop>
nnoremap [nora] <NOP>
nmap s <ESC>[nora]
nmap <C-f> <ESC>[nora]
imap <c-f> <ESC>[nora]

nnoremap [nora:mode] <NOP>
nmap m [nora:mode]

nnoremap [nora:mode]s <esc>[vimshell]

nnoremap [nora:ext] <Nop>
nmap <space> <ESC>[nora:ext]

nnoremap [search] <nop>
nmap [nora]g <esc>[search]
" }}}

" ベーシックセッティング {{{

" VIとの互換性を保たない
set nocompatible

" ファイルロケーション
set directory=~/.vim.tmp//
set backupdir=~/.vim.tmp//

" Swapは使わない
set noswapfile
" バックアップは使う
set backup

" VIMコマンド履歴保持数
set viminfo='100
" VIMレジストリ保持数
set viminfo+="1000
" VIMINFO保存ファイル
set viminfo+=n~/.vim.info

"
" 同時編集が発生した時の挙動
"

" 他の場所で更新されたら自動的に読み込む
set autoread

" バックスペースで削除可能なものを増やす
set backspace=start,eol,indent


"
" 検索の挙動
"

" 検索時に大文字小文字を無視
set ignorecase

" ただし、検索文字に大文字小文字があれば無視しない
set smartcase  " do not ignore capital when search words includs both

" 検索文字をハイライトしない
set nohlsearch

"
" TTYの設定
"
set lazyredraw
set ttyfast

" ウィンドウ幅で折り返す
set nowrap

" 固定折り返し文字幅を持たない
set textwidth=0

" 行番号を表示する
set number

set scrolloff=16

" }}}

" 折りたたみ {{{
"set foldtext=FoldCCtext()
set foldcolumn=3
set fillchars=vert:\|
hi Folded gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey30 guifg=Grey80
hi FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue

" }}}

" タブ系の設定 {{{
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
" }}}

" ステータスラインの設定 {{{
set laststatus=2
"set showmode
set noshowmode
set showcmd
set wildmenu
set ruler

NeoBundle 'itchyny/lightline.vim'
" wonbat solarized landscape
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }
 
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! MyModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

" set statusline=%<     " 行が長すぎるときに切り詰める位置
" set statusline+=[%n]  " バッファ番号
" set statusline+=%m    " %m 修正フラグ
" set statusline+=%r    " %r 読み込み専用フラグ
" set statusline+=%h    " %h ヘルプバッファフラグ
" set statusline+=%w    " %w プレビューウィンドウフラグ
" set statusline+=%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}  " fencとffを表示
" set statusline+=%y    " バッファ内のファイルのタイプ
" set statusline+=\     " 空白スペース
" if winwidth(0) >= 130
"     set statusline+=%F    " バッファ内のファイルのフルパス
" else
"     set statusline+=%t    " ファイル名のみ
" endif
" set statusline+=%=    " 左寄せ項目と右寄せ項目の区切り
" set statusline+=%{fugitive#statusline()}  " Gitのブランチ名を表示
" set statusline+=\ \   " 空白スペース2個
" set statusline+=%1l   " 何行目にカーソルがあるか
" set statusline+=/
" set statusline+=%L    " バッファ内の総行数
" set statusline+=,
" set statusline+=%c    " 何列目にカーソルがあるか
" set statusline+=%V    " 画面上の何列目にカーソルがあるか
" set statusline+=\ \   " 空白スペース2個
" set statusline+=%P    " ファイル内の何％の位置にあるか

" }}}

" 日本語関連 {{{

" 文字コード判定順序
set fileencodings=utf-8,euc-jp,iso-2022-jp,cp932

" }}}

" シンタックス {{{
syntax enable
" }}}

" NeoBundle {{{
NeoBundleFetch 'Shougo/neobundle.vim'

" Vim Procのインストール
NeoBundle 'Shougo/vimproc',{'build': 
\ {
\   'windows': 'make -f make_windows.mak',
\   'cygwin': 'make -f make_cygwin.mak',
\   'mac': 'make -f make_mac.mak',
\   'unix': 'make -f make_unix.mak',
\ }
\}

NeoBundleLazy 'thinca/vim-quickrun', {
            \ 'autoload' : {
            \     'commands' : [ 'QuickRun' ]
            \  }
            \}

NeoBundleLazy 'Shougo/vimfiler.vim', {
\   'autoload' : { 'commands' : [ 'VimFiler', 'VimFilerTab', 'VimFilerExplorer', 'VimFilerBufferDir', 'VimFilerCreate' ] },
\   'depends': [ 'Shougo/unite.vim' ],
\ }

NeoBundleLazy 'Shougo/unite.vim' , {
\   'autoload' : { 'commands' : [ 'Unite' ] }
\ }

" VimShell
NeoBundleLazy 'Shougo/vimshell', {'depends': ['Shougo/vimproc']}


" Uniteプラグイン
NeoBundleLazy 'Shougo/unite-outline'
" NeoBundleLazy 'ujihisa/unite-colorscheme'
NeoBundleLazy 'tacroe/unite-mark'
NeoBundleLazy 'osyo-manga/unite-fold'
" NeoBundleLazy 'taka84u9/unite-git'
" NeoBundleLazy 'thinca/vim-unite-history'
" NeoBundleLazy 'kannokanno/unite-dwm'
NeoBundleLazy 'tsukkee/unite-tag'


NeoBundleLazy 'thinca/vim-ref', {
\ 'autoload' : {'commands': [ 'Ref' ] },
\ 'depends' : ["mfumi/ref-dicts-en"]
\}
NeoBundleLazy 'mfumi/ref-dicts-en'

"
" メモ帳
"
" @See https://sites.google.com/site/fudist/Home/qfixhowm/install
NeoBundleLazy 'fuenor/qfixgrep'
NeoBundleLazy 'fuenor/qfixhowm'
NeoBundleLazy "osyo-manga/unite-qfixhowm"


NeoBundleLazy "sjl/gundo.vim", {"autoload": {"commands": ['GundoToggle'],}}
NeoBundleLazy 'majutsushi/tagbar', {"autload": {"commands": ["TagbarToggle"],}}

NeoBundleLazy 'plasticboy/vim-markdown', {"autoload": {"filetypes": ["markdown"]}}

" インデントをわかりやすくする
NeoBundleLazy  'nathanaelkane/vim-indent-guides'

" VimTemplate
NeoBundleLazy "thinca/vim-template"


" ディレクトリ単位でのvimrcを有効にする
NeoBundleLazy 'thinca/vim-localrc'

" ctagsを自動化
NeoBundleLazy 'soramugi/auto-ctags.vim'

"
" プログラミング用
"
" HTML5シンタックスを有効にする
NeoBundleLazy 'othree/html5.vim.git', {"autoload": {"filetypes": ['html']}}

" CoffeeScript用プラグイン
NeoBundleLazy 'kchmck/vim-coffee-script', {"autoload": {"filetype": ["coffee"]}}

" Align
NeoBundleLazy 'h1mesuke/vim-alignta.git', {"autoload": {"commands": ["Align"]}}

" TagList
NeoBundleLazy 'taglist.vim'

" タグジャンプ
NeoBundleLazy  'szw/vim-tags'

"Dockerfile Syntax
NeoBundleLazy 'ekalinin/Dockerfile.vim', {"autoload": {"filetype": ["dockerfile"]}}

"Vagrant Syntax
NeoBundleLazy 'markcornick/vim-vagrant', {"autoload": {"filetype": ["vagrantfile"]}}

"Tmux Syntax
NeoBundleLazy 'Keithbsmiley/tmux.vim', {"autoload": {"filetype": ["tmux"]}}

" Powerline
NeoBundleLazy 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim' }
NeoBundleLazy 'Lokaltog/powerline-fontpatcher'

" HTML閉じタグ後のコメントを,tで入力
NeoBundleLazy 'haya14busa/endtagcomment.vim', {"autoload": {"filetype": ["html"]}}

" プロジェクト管理
" NeoBundle 'project.vim'
NeoBundleLazy 'kien/ctrlp.vim', {"autoload": {"commands": ["CtrlP", "CtrlPMRUFiles"]}}

" メモ
NeoBundleLazy 'glidenote/memolist.vim', {"autoload": {"commands": ["MemoList"]}}

" }}}

" 設定 {{{
NeoBundle 'kana/vim-textobj-user'

" Submoduleを有効にする
NeoBundle  'kana/vim-submode'

" Gitを便利に使う
NeoBundle 'tpope/vim-fugitive'

" コメントON/OFFを手軽に実行 (gcc)
NeoBundle 'tomtom/tcomment_vim'

" Tab単位でのcdを有効にする
NeoBundle 'kana/vim-tabpagecd'

" カラースキーマ
NeoBundle 'nanotech/jellybeans.vim'
let s:bundle = neobundle#get('jellybeans.vim')
function! s:bundle.hooks.on_source(bundle)
    colorscheme jellybeans
endfunction

" Undoをファイルを閉じた後も有効にする
if has('persistent_undo')
    set undofile
    set undodir=$HOME/.vim.tmp
endif 

" キーバインド {{{

" 間違えそうなバインドを調整(事故の素) {{{
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
nnoremap Q <Nop>
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
nnoremap ; :
cmap w1 w! 
cmap q1 q! 
" }}}

" VIをもっと直感的にする {{{
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
inoremap jj <ESC>

" カーソル下の単語を * で検索
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v, '\/'), "\n", '\\n', 'g')<CR><CR>

" 検索後にジャンプした際に検索単語を画面中央に持ってくる
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" vを二回で行末まで選択
vnoremap v $h

set showmatch           " 対応する括弧などをハイライト表示する
set matchtime=3         " 対応括弧のハイライト表示を3秒にする
" 対応括弧に'<'と'>'のペアを追加
set matchpairs& matchpairs+=<:>
" デフォルト不可視文字は美しくないのでUnicodeで綺麗に
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:↲
" }}}

" マウスの設定 {{{

" マウスの有効無効
nnoremap <F3> :call ToggleMouse()<CR>
inoremap <F3> :call ToggleMouse()<CR>
function! ToggleMouse()
	if &mouse == 'a'
		set mouse =
		echo "Mouse usage disabled"
	else
		set mouse=a
		echo "Mouse usage enabled"
	endif
endfunction
" }}}

" モードトグル {{{
nmap <silent> [nora:mode]p :<C-u>set paste!<CR>
nmap <silent> [nora:mode]m :<C-u>call ToggleMouse()<CR>
" }}}

" w!!でsudo経由で保存
cmap w!! w !sudo tee > /dev/null %

" }}}

" ウインドウ操作系 {{{

NeoBundle 'Shougo/neomru.vim'

nmap <silent> [nora]j <C-w>j
nmap <silent> [nora]k <C-w>k
nmap <silent> [nora]l <C-w>l
nmap <silent> [nora]h <C-w>h
nmap <silent> [nora]<C-j> <C-w>j
nmap <silent> [nora]<C-k> <C-w>k
nmap <silent> [nora]<C-l> <C-w>l
nmap <silent> [nora]<C-h> <C-w>h
nnoremap [nora]= <C-w>=
nnoremap [nora]> <C-w>>
nnoremap [nora]< <C-w><
nnoremap [nora]+ <C-w>+
nnoremap [nora]- <C-w>-
let s:bundle = neobundle#get("vim-submode")
function! s:bundle.hooks.on_source(bundle)
    call submode#enter_with('windowi', 'n', '', 's>', '<C-w>>')
    call submode#enter_with('windowi', 'n', '', 's<', '<C-w><')
    call submode#enter_with('windowi', 'n', '', 's+', '<C-w>+')
    call submode#enter_with('windowi', 'n', '', 's-', '<C-w>-')
    call submode#map('windowi', 'n', '', '>', '<C-w>>')
    call submode#map('windowi', 'n', '', '<', '<C-w><')
    call submode#map('windowi', 'n', '', '+', '<C-w>+')
    call submode#map('windowi', 'n', '', '-', '<C-w>-')
endfunction

" エクスプローラを開く
nnoremap <silent> [nora:ext]e :<C-u>VimFilerCreate -split -simple -winwidth=35 -no-quit<CR>
nnoremap <silent> [nora]<C-e> :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>

" タグバーを開く
nnoremap <silent> [nora:ext]t :<C-u>TagbarToggle<CR>
" gundo
nnoremap <silent> [nora:ext]g :<C-u>GundoToggle<CR>


" }}}

" Unite系 {{{
nnoremap <silent> [nora]b :<C-u>Unite buffer bookmark<CR>
nnoremap <silent> [nora]o :<C-u>Unite fold outline<CR>
nnoremap <silent> [nora]<C-h> :<C-u>Unite buffer file_mru<CR>
nnoremap <silent> [nora]c :<C-u>UniteWithBufferDir file file/new directory/new<CR>
nnoremap <silent> [nora]q :<C-u>Unite qfixhowm qfixhowm/new <CR>
nnoremap <silent> [nora]<C-q> :<C-u>Unite qfixhowm qfixhowm/new <CR>
nnoremap <silent> [nora]<C-c> :<C-u>UniteWithBufferDir file file/new directory/new<CR>
nnoremap <silent> [nora]y :<C-u>Unite history/yank<CR>

let s:bundle = neobundle#get("unite.vim")
function! s:bundle.hooks.on_source(bundle)
    let g:unite_enable_start_insert=1
    let g:unite_source_history_yank_enable =1
    let g:unite_source_file_mru_limit = 200
endfunction


autocmd NoraAutoCmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
    nnoremap <silent> <buffer> <expr> <C-T> unite#do_action('tabopen')
    inoremap <silent> <buffer> <expr> <C-T> unite#do_action('tabopen')
    nnoremap <silent> <buffer> <expr> t unite#do_action('tabopen')
    nnoremap <silent> <buffer> <expr> o unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-O> unite#do_action('split')
    inoremap <silent> <buffer> <expr> <C-O> unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
    nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
    imap <buffer> <C-k>     <Plug>(unite_select_previous_line)
    imap <buffer> <C-j>     <Plug>(unite_select_next_line)
endfunction
" }}}

" プロジェクト操作(CtrlP) {{{
let s:bundle = neobundle#get("ctrlp.vim")
function! s:bundle.hooks.on_source(bundle)
    let g:ctrlp_map = '<Nop>'
    let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_open_new_file = 'r'
    let g:ctrlp_extensions = ['tag', 'quickfix', 'dir', 'line', 'mixed']
    let g:ctrlp_max_files  = 100000 " 対象ファイル最大数(default:10000)
    let g:ctrlp_max_depth = 10 " 検索対象の最大階層数(default:40)
    let g:ctrlp_clear_cache_on_exit = 0 " vim終了時にキャッシュクリアしない(default:1)
    let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:18,results:50' " 検索ウィンドウの設定
endfunction
nnoremap [nora]m :<C-u>CtrlPMRUFiles<CR> 
" }}}

" HTML操作 {{{
nmap [nora]et <Plug>(endtagcomment)
" }}}

" 辞書: vim-ref {{{
" vimshell% cd ~/.vim/
" vimshell% curl -sSL "http://jp1.php.net/get/php_manual_ja.tar.gz/from/this/mirror" | tar zxvf -
"
nnoremap [ref] <Nop>
nmap [nora]r [ref]

"Ref webdictでalcを使う設定
let g:ref_source_webdict_cmd = 'lynx -dump -nonumbers %s'
"let g:ref_source_webdict_use_cache = 1
let g:ref_source_webdict_sites = {
            \ 'alc' : {
            \   'url' : 'http://eow.alc.co.jp/%s/UTF-8/',
            \   'cache' : 1
            \   },
            \ 'wiktionary' : {
            \   'url' : 'http://ja.wiktionary.org/wiki/%s',
            \   'keyword_encoding': 'utf-8',
            \   'cache' : 1
            \   }
            \ }
function! g:ref_source_webdict_sites.alc.filter(output)
      return join(split(a:output, "\n")[42 :], "\n")
endfunction

let g:ref_phpmanual_path = "/opt/vim/php-chunked-xhtml/"
nmap [ref]a :<C-u>Ref webdict alc 
nmap [ref]w :<C-u>Ref webdict wiktionary 
nmap [ref]p :<C-u>Ref phpmanual 
" }}}

" メモ {{{

" memolist {{{
let g:memolist_qfixgrep = 1
let g:memolist_memo_suffix = "md"
let g:memolist_memo_date = "%Y-%m-%d %H:%M"
let g:memolist_memo_date = "epoch"
let g:memolist_memo_date = "%d %t"
let g:memolist_prompt_tags = 1
let g:memolist_prompt_categories = 1
let g:memolist_qfixgrep = 1
let g:memolist_vimfiler = 1
let g:memolist_template_dir_path = "~/memo/memolist"
map [nora:ext]ml  :MemoList<cr>
map [nora:ext]mn  :MemoNew<cr>
map [nora:ext]mg  :MemoGrep<cr>
" }}}

" QFixHowm {{{
" メモ機能
"set QFixHowm_Key = '<nop>'
 
let howm_dir             = '~/memo/hown'

" マークダウン記法を使う
"let QFixHowm_FileType = 'markdown'
"let QFixHowm_Title = '#'
"let QFixMRU_Title = {}
"let QFixMRU_Title['mkd']       = '^###[^#]'
"let QFixMRU_Title['mkd_regxp'] = '^###[^#]'
au BufRead,BufNewFile *.md set filetype=markdown

" ファイル拡張子をmdにする
let howm_filename = '%Y/%m/%Y-%m-%d-%H%M%S.md'
" ファイルタイプをmarkdownにする
let QFixHowm_FileType = 'markdown'
" タイトル記号
" let QFixHowm_Title = '#'
" タイトル行検索正規表現の辞書を初期化
let QFixMRU_Title = {}
" MRUでタイトル行とみなす正規表現(Vimの正規表現で指定)
let QFixMRU_Title['mkd'] = '^###[^#]'
" grepでタイトル行とみなす正規表現(使用するgrepによっては変更する必要があります)
let QFixMRU_Title['mkd_regxp'] = '^###[^#]'
" }}}

" }}}

" Grep系 {{{
nnoremap <silent> [search] :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" カーソル位置の単語で検索
nnoremap <silent> [search]j :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W><CR>
" 検索の再開
nnoremap <silent> [search]k :<C-u>UniteResume search-buffer<CR>
" }}}

" Git系 {{{
nnoremap  [nora:ext]s :<C-u>Git status<CR>
nnoremap  [nora:ext]p :<C-u>Git push<CR>
nnoremap  [nora:ext]a :<C-u>Git add %<CR>
nnoremap  [nora:ext]c :<C-u>Git commit<CR>
nnoremap  [nora:ext]d :<C-u>Git diff %<CR>
" }}}

" Snippet {{{
" スニペット
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
 
" SuperTab like snippets behavior.
" imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: pumvisible() ? "\<C-n>" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: "\<TAB>"

let g:neosnippet#snippets_directory='~/.dotfiles/vim/snippets/'
nnoremap [snipet] <nop>
nmap [nora]s [snipet]
nnoremap <silent> [snipet]e :<c-u>NeoSnippetEdit<cr>
nnoremap <silent> [snipet] :<c-u>NeoSnippetEdit<cr>

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" }}}

" 補完 {{{
" Luaオプションの有無で使用するプラグインを変更
function! s:meet_neocomplete_requirements()
	return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

if s:meet_neocomplete_requirements()
	NeoBundle 'Shougo/neocomplete.vim'
	NeoBundleFetch 'Shougo/neocomplcache.vim'
else
	NeoBundleFetch 'Shougo/neocomplete.vim'
	NeoBundle 'Shougo/neocomplcache.vim'
endif

if neobundle#is_installed('neocomplete')
	let g:neocomplcate#enable_at_startup=1
endif
if neobundle#is_installed('neocomplcache')
	let g:neocomplcache#enable_at_startup=1
endif

"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
if s:meet_neocomplete_requirements()
	" 新しく追加した neocomplete の設定
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
		\ 'default' : '',
		\ 'vimshell' : $HOME.'/.vimshell_hist',
		\ 'scheme' : $HOME.'/.gosh_completions'
			\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
	inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
	  return neocomplete#close_popup() . "\<CR>"
	  " For no inserting <CR> key.
	  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><C-y>  neocomplete#close_popup()
	inoremap <expr><C-e>  neocomplete#cancel_popup()
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

	" For cursor moving in insert mode(Not recommended)
	"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
	"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
	"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
	"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
	" Or set this.
	"let g:neocomplete#enable_cursor_hold_i = 1
	" Or set this.
	"let g:neocomplete#enable_insert_char_pre = 1

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd NoraAutoCmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd NoraAutoCmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd NoraAutoCmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd NoraAutoCmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd NoraAutoCmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
	  let g:neocomplete#sources#omni#input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
else
	" 今までの neocomplcache の設定
endif
" }}}

" Vimshell {{{

":VimShell [{options}...] [{path}]		*:VimShell*
":VimShellCreate [{options}...] [{path}]		*:VimShellCreate*
":VimShellTab [{options}...] [{path}]		*:VimShellTab*
":VimShellPop [{options}...] [{path}]		*:VimShellPop*
":VimShellCurrentDir [{options}...] [{path}]	*:VimShellCurrentDir*
":VimShellBufferDir [{options}...] [{path}]	*:VimShellBufferDir*
":VimShellExecute [{option}] [{command}]			*:VimShellExecute*
":VimShellInteractive [{option}] [{command}]		*:VimShellInteractive*
":[range]VimShellSendString {string}		*:VimShellSendString*
":VimShellSendBuffer {bufname}			*:VimShellSendBuffer*
":VimShellClose [{buffer-name}]			*:VimShellClose*

" }}}


" }}}

" Hack {{{

" Use vsplit mode
if has("vim_starting") && !has('gui_running') && has('vertsplit')
 function! g:EnableVsplitMode()
   " enable origin mode and left/right margins
   let &t_CS = "y"
   let &t_ti = &t_ti . "\e[?6;69h"
   let &t_te = "\e[?6;69l\e[999H" . &t_te
   let &t_CV = "\e[%i%p1%d;%p2%ds"
   call writefile([ "\e[?6;69h" ], "/dev/tty", "a")
 endfunction

 " old vim does not ignore CPR
 map <special> <Esc>[3;9R <Nop>

 " new vim can't handle CPR with direct mapping
 " map <expr> ^[[3;3R g:EnableVsplitMode()
 set t_F9=[3;3R
 map <expr> <t_F9> g:EnableVsplitMode()
 let &t_RV .= "\e[?6;69h\e[1;3s\e[3;9H\e[6n\e[0;0s\e[?6;69l"
endif

command! -nargs=0 JunkFile call s:open_junk_file()
function! s:open_junk_file()
    let l:junk_dir = $HOME . '/.vim_junk'. strftime('/%Y/%m')
    if !isdirectory(l:junk_dir)
        call mkdir(l:junk_dir, 'p')
    endif

    let l:filename = input('Junk Code: ', l:junk_dir.strftime('/%Y-%m-%d-%H%M%S.'))
    if l:filename != ''
        execute 'edit ' . l:filename
    endif
endfunction

" }}}

" Quickrun {{{

let s:bundle = neobundle#get("vim-quickrun")
let g:quickrun_config = {
\   "_" : {
\       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
\       "hook/unite_quickfix/enable_failure" : 1,
\       "hook/close_quickfix/enable_exit" : 1,
\       "hook/close_buffer/enable_failure" : 1,
\       "hook/close_buffer/enable_empty_data" : 1,
\       "runner" : "vimproc",
\       "runner/vimproc/updatetime" : 60,
\       "outputter" : "multi:buffer:quickfix",
\       "outputter/buffer/split" : ":botright 18sp",
\   },
\}

nnoremap <silent> [nora:ext]r : <C-u>QuickRun<CR>

" }}}

" ネオバンドル用の終了 {{{
call neobundle#end()
filetype plugin indent on
" }}}
